// Generated by CoffeeScript 1.4.0
(function() {
  var initializers, modules;

  modules = {};

  initializers = {};

  window.BC = {
    namespace: function(name) {
      var initializer, _i, _len, _ref;
      if (_.isUndefined(modules[name])) {
        modules[name] = {};
      }
      if (_.isArray(initializers[name])) {
        _ref = initializers[name];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          initializer = _ref[_i];
          initializer(modules[name]);
        }
        initializers[name] = void 0;
      }
      return modules[name];
    },
    define: function(name, fn) {
      if (_.isUndefined(initializers[name])) {
        return initializers[name] = [fn];
      } else {
        return initializers[name].push(fn);
      }
    }
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var __slice = [].slice;

  window.BC.define('bootstrap', function(bootstrap) {
    var button, common, dropdown, mixins;
    mixins = window.BC.namespace("bootstrap.mixins");
    common = window.BC.namespace("common");
    $.extend(this, common);
    button = function(init) {
      return function() {
        var args, click, last;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        last = _.last(args);
        click = function() {
          return false;
        };
        if (_.isFunction(last)) {
          click = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            last.apply(null, args);
            return false;
          };
          args = args.slice(0, args.length - 1);
        }
        return $.extend(tag('button', init).apply(null, args).on('click', click), mixins.sizeable('btn'), {
          block: function() {
            return this.addClass("btn-block");
          }
        });
      };
    };
    bootstrap.button = button({
      "class": 'btn'
    });
    bootstrap.button.primary = button({
      "class": 'btn btn-primary'
    });
    bootstrap.button.inverse = button({
      "class": 'btn btn-inverse'
    });
    bootstrap.button.link = button({
      "class": 'btn btn-link'
    });
    bootstrap.button.block = button({
      "class": 'btn btn-block'
    });
    bootstrap.button.info = button({
      "class": 'btn btn-info'
    });
    bootstrap.button.warning = button({
      "class": 'btn btn-warning'
    });
    bootstrap.button.success = button({
      "class": 'btn btn-success'
    });
    bootstrap.button.danger = button({
      "class": 'btn btn-danger'
    });
    bootstrap.button.submit = button({
      "class": 'btn',
      type: 'submit'
    });
    bootstrap.button.group = tag('div', {
      "class": 'btn-group'
    });
    bootstrap.button.group.vertical = tag('div', {
      "class": 'btn-group btn-group-vertical'
    });
    bootstrap.button.toolbar = tag('div', {
      "class": 'btn-toolbar'
    });
    bootstrap.a = function() {
      var args, click, last;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      last = _.last(args);
      click = function() {
        return true;
      };
      if (_.isFunction(last)) {
        click = function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          last.apply(null, args);
          return true;
        };
        args = args.slice(0, args.length - 1);
      }
      return tag('a', {
        href: 'javascript:void(0);'
      }).apply(null, args).on('click', click);
    };
    dropdown = function() {
      var button, item, items, toLi;
      button = arguments[0], items = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      button.addItems(span({
        "class": 'caret'
      })).addClass('dropdown-toggle').addAttr({
        'data-toggle': "dropdown"
      }).onInit(function(el) {
        return el.dropdown();
      });
      toLi = function(item) {
        if (item.isDivider) {
          return bootstrap.li({
            "class": 'divider'
          });
        } else {
          return bootstrap.li(item);
        }
      };
      return [
        button, bootstrap.ul({
          "class": "dropdown-menu"
        }, (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = items.length; _i < _len; _i++) {
            item = items[_i];
            _results.push(toLi(item));
          }
          return _results;
        })())
      ];
    };
    bootstrap.dropdown = function() {
      var button, items;
      button = arguments[0], items = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return div({
        "class": "btn-group"
      }, dropdown.apply(null, [button].concat(__slice.call(items))));
    };
    bootstrap.dropdown.segmented = function() {
      var btn, items, toggle;
      btn = arguments[0], items = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      toggle = bootstrap.button().addClass(btn.classes());
      return div({
        "class": "btn-group"
      }, btn, dropdown.apply(null, [toggle].concat(__slice.call(items))));
    };
    return bootstrap.dropdown.divider = function() {
      return {
        isDivider: true
      };
    };
  });

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var __slice = [].slice;

  window.BC.define('bootstrap', function(bootstrap) {
    var common, form, getModel, img, input, mixins, models, toAddOn;
    mixins = window.BC.namespace("bootstrap.mixins");
    common = window.BC.namespace("common");
    models = window.BC.namespace("models");
    $.extend(this, common);
    getModel = function(items) {
      var model;
      model = _.last(items);
      if (_.isUndefined(model) || !common.isModel(model)) {
        model = models.model("");
      } else {
        items.pop();
      }
      return model;
    };
    input = function() {
      var changeEvents, getValue, init, items;
      init = arguments[0], changeEvents = arguments[1], getValue = arguments[2], items = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
      return tag('input', init).apply(null, items).on(changeEvents, function(e) {
        return e.data.setValue(getValue(this));
      });
    };
    bootstrap.input = {
      text: function() {
        var items, model;
        items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        model = getModel(items);
        return $.extend(input.apply(null, [{
          type: 'text'
        }, 'keyup change', (function(el) {
          return $(el).val();
        })].concat(__slice.call(items))), {
          placeholder: function(value) {
            return this.addAttr({
              'placeholder': value
            });
          }
        }, mixins.sizeable("input"), mixins.spannable()).bindValue(model);
      },
      password: function() {
        var items, model;
        items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        model = getModel(items);
        return this.text.apply(this, items).addAttr({
          type: 'password'
        }).bindValue(model);
      },
      search: function() {
        var items, model;
        items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        model = getModel(items);
        return this.text.apply(this, items).addClass("search-query").bindValue(model);
      },
      checkbox: function() {
        var items, model;
        items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        model = getModel(items);
        return $.extend(input.apply(null, [{
          type: 'checkbox'
        }, 'click', (function(el) {
          return $(el).is(':checked');
        })].concat(__slice.call(items))), {
          isCheckbox: true,
          label: function(value) {
            return label({
              "class": 'checkbox'
            }, this, value);
          },
          inlineLabel: function(value) {
            return label.inline({
              "class": 'checkbox'
            }, this, value);
          }
        }).bindValue(model).bindAttr(model, function() {
          return {
            checked: model.get()
          };
        });
      },
      radio: function() {
        var items, model, value;
        items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        model = getModel(items);
        value = items[0].value;
        return $.extend(input.apply(null, [{
          type: 'radio'
        }, 'click', (function() {
          return value;
        })].concat(__slice.call(items))), {
          label: function(value) {
            return label({
              "class": 'radio'
            }, this, value);
          },
          inlineLabel: function(value) {
            return label.inline({
              "class": 'radio'
            }, this, value);
          },
          isRadio: true
        }).bindValue(model).bindAttr(model, function() {
          return {
            checked: model.get() === value
          };
        });
      },
      submit: function(name, click) {
        return tag('input')(name).addAttr({
          type: 'submit'
        }).on('click', click);
      }
    };
    bootstrap.select = function() {
      var items, model;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      model = getModel(items);
      return $.extend(tag('select').apply(null, items).on('change', function(e) {
        return e.data.setValue($(this).val());
      }).bindValue(model), mixins.spannable());
    };
    bootstrap.select.multiple = function(model) {
      return bootstrap.select(model, {
        multiple: 'multiple'
      });
    };
    bootstrap.option = function(text, value, selected) {
      if (selected == null) {
        selected = false;
      }
      return tag('option', {
        value: value,
        selected: selected
      })(text);
    };
    bootstrap.textarea = function() {
      var items, model;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      model = getModel(items);
      return tag('textarea').apply(null, items).on('keyup change', function(e) {
        return e.data.setValue($(this).val());
      }).bindValue(model);
    };
    form = tag('form');
    bootstrap.form = function() {
      var actions, content, items, key, value;
      items = arguments[0], actions = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      content = [];
      for (key in items) {
        value = items[key];
        if (key === 'legend') {
          content.push(legend(value));
        } else if (key === 'actions') {
          actions = div({
            "class": "form-actions"
          }, value);
        } else if (value.isCheckbox) {
          content.push(value.label(key));
        } else if (key === "") {
          content.push(value);
        } else {
          content.push(label(key));
          content.push(value);
        }
      }
      return form(fieldset(content, actions));
    };
    bootstrap.form.search = function() {
      var items;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return form({
        "class": "form-search"
      }, items);
    };
    bootstrap.form.inline = function() {
      var items;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return form({
        "class": "form-inline"
      }, items);
    };
    bootstrap.form.horizontal = function(items) {
      var actions, content, control, group, key, value;
      group = function() {
        var items;
        items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return div({
          "class": 'control-group'
        }, items);
      };
      control = function() {
        var items;
        items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return div({
          "class": 'controls'
        }, items);
      };
      content = [];
      for (key in items) {
        value = items[key];
        if (key === 'legend') {
          content.push(legend(value));
        } else if (key === 'actions') {
          actions = div({
            "class": "form-actions"
          }, value);
        } else if (value.isCheckbox) {
          content.push(group(control(value.label(key))));
        } else if (key === "") {
          content.push(group(control(value)));
        } else {
          content.push(group(label({
            "class": "control-label"
          }, key), control(value)));
        }
      }
      return form({
        "class": 'form-horizontal'
      }, content, actions);
    };
    bootstrap.form.actions = function() {
      var items;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return div({
        "class": "form-actions"
      }, items);
    };
    bootstrap.help = {
      block: function(text) {
        return bootstrap.span({
          "class": 'help-block'
        }, text);
      },
      inline: function(text) {
        return bootstrap.span({
          "class": 'help-inline'
        }, text);
      }
    };
    bootstrap.legend = tag('legend');
    bootstrap.fieldset = tag('fieldset');
    bootstrap.label = tag('label');
    bootstrap.label.inline = tag('label', {
      "class": 'inline'
    });
    toAddOn = function(item) {
      if (_.isString(item)) {
        return bootstrap.span({
          "class": 'add-on'
        }, item);
      } else {
        return item;
      }
    };
    bootstrap.append = function() {
      var input, item, items;
      input = arguments[0], items = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      items = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          item = items[_i];
          _results.push(toAddOn(item));
        }
        return _results;
      })();
      return div({
        "class": "input-append"
      }, input, items);
    };
    bootstrap.prepend = function() {
      var item, items;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      items = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          item = items[_i];
          _results.push(toAddOn(item));
        }
        return _results;
      })();
      return div({
        "class": "input-prepend"
      }, items);
    };
    img = function(initialConfig) {
      if (initialConfig == null) {
        initialConfig = {};
      }
      return function(config) {
        return tag('img', initialConfig)(config);
      };
    };
    bootstrap.img = img();
    bootstrap.img.rounded = img({
      "class": 'img-rounded'
    });
    bootstrap.img.circle = img({
      "class": 'img-circle'
    });
    bootstrap.img.polaroid = img({
      "class": 'img-polaroid'
    });
    bootstrap.header = tag('header');
    bootstrap.section = tag('section');
    bootstrap.footer = tag('footer');
    return bootstrap.br = tag('br');
  });

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {

  window.BC.define('bootstrap', function(bootstrap) {
    var common, icon;
    common = window.BC.namespace("common");
    icon = function(icon) {
      return "<i class='" + icon + "'></i>";
    };
    bootstrap.icon = tag('i');
    bootstrap.icon.glass = icon('icon-glass');
    bootstrap.icon.music = icon('icon-music');
    bootstrap.icon.search = icon('icon-search');
    bootstrap.icon.envelope = icon('icon-envelope');
    bootstrap.icon.heart = icon('icon-heart');
    bootstrap.icon.star = icon('icon-star');
    bootstrap.icon.star_empty = icon('icon-star-empty');
    bootstrap.icon.user = icon('icon-user');
    bootstrap.icon.film = icon('icon-film');
    bootstrap.icon.th_large = icon('icon-th-large');
    bootstrap.icon.th = icon('icon-th');
    bootstrap.icon.th_list = icon('icon-th-list');
    bootstrap.icon.ok = icon('icon-ok');
    bootstrap.icon.remove = icon('icon-remove');
    bootstrap.icon.zoom_in = icon('icon-zoom-in');
    bootstrap.icon.zoom_out = icon('icon-zoom-out');
    bootstrap.icon.off = icon('icon-off');
    bootstrap.icon.signal = icon('icon-signal');
    bootstrap.icon.cog = icon('icon-cog');
    bootstrap.icon.trash = icon('icon-trash');
    bootstrap.icon.home = icon('icon-home');
    bootstrap.icon.file = icon('icon-file');
    bootstrap.icon.time = icon('icon-time');
    bootstrap.icon.road = icon('icon-road');
    bootstrap.icon.download_alt = icon('icon-download-alt');
    bootstrap.icon.download = icon('icon-download');
    bootstrap.icon.upload = icon('icon-upload');
    bootstrap.icon.inbox = icon('icon-inbox');
    bootstrap.icon.play_circle = icon('icon-play-circle');
    bootstrap.icon.repeat = icon('icon-repeat');
    bootstrap.icon.refresh = icon('icon-refresh');
    bootstrap.icon.list_alt = icon('icon-list-alt');
    bootstrap.icon.lock = icon('icon-lock');
    bootstrap.icon.flag = icon('icon-flag');
    bootstrap.icon.headphones = icon('icon-headphones');
    bootstrap.icon.volume_off = icon('icon-volume-off');
    bootstrap.icon.volume_down = icon('icon-volume-down');
    bootstrap.icon.volume_up = icon('icon-volume-up');
    bootstrap.icon.qrcode = icon('icon-qrcode');
    bootstrap.icon.barcode = icon('icon-barcode');
    bootstrap.icon.tag = icon('icon-tag');
    bootstrap.icon.tags = icon('icon-tags');
    bootstrap.icon.book = icon('icon-book');
    bootstrap.icon.bookmark = icon('icon-bookmark');
    bootstrap.icon.print = icon('icon-print');
    bootstrap.icon.camera = icon('icon-camera');
    bootstrap.icon.font = icon('icon-font');
    bootstrap.icon.bold = icon('icon-bold');
    bootstrap.icon.italic = icon('icon-italic');
    bootstrap.icon.text_height = icon('icon-text-height');
    bootstrap.icon.text_width = icon('icon-text-width');
    bootstrap.icon.align_left = icon('icon-align-left');
    bootstrap.icon.align_center = icon('icon-align-center');
    bootstrap.icon.align_right = icon('icon-align-right');
    bootstrap.icon.align_justify = icon('icon-align-justify');
    bootstrap.icon.list = icon('icon-list');
    bootstrap.icon.indent_left = icon('icon-indent-left');
    bootstrap.icon.indent_right = icon('icon-indent-right');
    bootstrap.icon.facetime_video = icon('icon-facetime-video');
    bootstrap.icon.picture = icon('icon-picture');
    bootstrap.icon.pencil = icon('icon-pencil');
    bootstrap.icon.map_marker = icon('icon-map-marker');
    bootstrap.icon.adjust = icon('icon-adjust');
    bootstrap.icon.tint = icon('icon-tint');
    bootstrap.icon.edit = icon('icon-edit');
    bootstrap.icon.share = icon('icon-share');
    bootstrap.icon.check = icon('icon-check');
    bootstrap.icon.move = icon('icon-move');
    bootstrap.icon.step_backward = icon('icon-step-backward');
    bootstrap.icon.fast_backward = icon('icon-fast-backward');
    bootstrap.icon.backward = icon('icon-backward');
    bootstrap.icon.play = icon('icon-play');
    bootstrap.icon.pause = icon('icon-pause');
    bootstrap.icon.stop = icon('icon-stop');
    bootstrap.icon.forward = icon('icon-forward');
    bootstrap.icon.fast_forward = icon('icon-fast-forward');
    bootstrap.icon.step_forward = icon('icon-step-forward');
    bootstrap.icon.eject = icon('icon-eject');
    bootstrap.icon.chevron_left = icon('icon-chevron-left');
    bootstrap.icon.chevron_right = icon('icon-chevron-right');
    bootstrap.icon.plus_sign = icon('icon-plus-sign');
    bootstrap.icon.minus_sign = icon('icon-minus-sign');
    bootstrap.icon.remove_sign = icon('icon-remove-sign');
    bootstrap.icon.ok_sign = icon('icon-ok-sign');
    bootstrap.icon.question_sign = icon('icon-question-sign');
    bootstrap.icon.info_sign = icon('icon-info-sign');
    bootstrap.icon.screenshot = icon('icon-screenshot');
    bootstrap.icon.remove_circle = icon('icon-remove-circle');
    bootstrap.icon.ok_circle = icon('icon-ok-circle');
    bootstrap.icon.ban_circle = icon('icon-ban-circle');
    bootstrap.icon.arrow_left = icon('icon-arrow-left');
    bootstrap.icon.arrow_right = icon('icon-arrow-right');
    bootstrap.icon.arrow_up = icon('icon-arrow-up');
    bootstrap.icon.arrow_down = icon('icon-arrow-down');
    bootstrap.icon.share_alt = icon('icon-share-alt');
    bootstrap.icon.resize_full = icon('icon-resize-full');
    bootstrap.icon.resize_small = icon('icon-resize-small');
    bootstrap.icon.plus = icon('icon-plus');
    bootstrap.icon.minus = icon('icon-minus');
    bootstrap.icon.asterisk = icon('icon-asterisk');
    bootstrap.icon.exclamation_sign = icon('icon-exclamation-sign');
    bootstrap.icon.gift = icon('icon-gift');
    bootstrap.icon.leaf = icon('icon-leaf');
    bootstrap.icon.fire = icon('icon-fire');
    bootstrap.icon.eye_open = icon('icon-eye-open');
    bootstrap.icon.eye_close = icon('icon-eye-close');
    bootstrap.icon.warning_sign = icon('icon-warning-sign');
    bootstrap.icon.plane = icon('icon-plane');
    bootstrap.icon.calendar = icon('icon-calendar');
    bootstrap.icon.random = icon('icon-random');
    bootstrap.icon.comment = icon('icon-comment');
    bootstrap.icon.magnet = icon('icon-magnet');
    bootstrap.icon.chevron_up = icon('icon-chevron-up');
    bootstrap.icon.chevron_down = icon('icon-chevron-down');
    bootstrap.icon.retweet = icon('icon-retweet');
    bootstrap.icon.shopping_cart = icon('icon-shopping-cart');
    bootstrap.icon.folder_close = icon('icon-folder-close');
    bootstrap.icon.folder_open = icon('icon-folder-open');
    bootstrap.icon.resize_vertical = icon('icon-resize-vertical');
    bootstrap.icon.resize_horizontal = icon('icon-resize-horizontal');
    bootstrap.icon.hdd = icon('icon-hdd');
    bootstrap.icon.bullhorn = icon('icon-bullhorn');
    bootstrap.icon.bell = icon('icon-bell');
    bootstrap.icon.certificate = icon('icon-certificate');
    bootstrap.icon.thumbs_up = icon('icon-thumbs-up');
    bootstrap.icon.thumbs_down = icon('icon-thumbs-down');
    bootstrap.icon.hand_right = icon('icon-hand-right');
    bootstrap.icon.hand_left = icon('icon-hand-left');
    bootstrap.icon.hand_up = icon('icon-hand-up');
    bootstrap.icon.hand_down = icon('icon-hand-down');
    bootstrap.icon.circle_arrow_right = icon('icon-circle-arrow-right');
    bootstrap.icon.circle_arrow_left = icon('icon-circle-arrow-left');
    bootstrap.icon.circle_arrow_up = icon('icon-circle-arrow-up');
    bootstrap.icon.circle_arrow_down = icon('icon-circle-arrow-down');
    bootstrap.icon.globe = icon('icon-globe');
    bootstrap.icon.wrench = icon('icon-wrench');
    bootstrap.icon.tasks = icon('icon-tasks');
    bootstrap.icon.filter = icon('icon-filter');
    bootstrap.icon.briefcase = icon('icon-briefcase');
    return bootstrap.icon.fullscreen = icon('icon-fullscreen');
  });

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var __slice = [].slice;

  window.BC.define('bootstrap.mixins', function(mixins) {
    mixins.spannable = function() {
      var span;
      span = function(size) {
        return function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return this.addClassAndItems.apply(this, ['span' + size].concat(__slice.call(args)));
        };
      };
      return {
        span1: span(1),
        span2: span(2),
        span3: span(3),
        span4: span(4),
        span5: span(5),
        span6: span(6),
        span7: span(7),
        span8: span(8),
        span9: span(9),
        span10: span(10),
        span11: span(11),
        span12: span(12)
      };
    };
    mixins.offsetable = function() {
      var offset;
      offset = function(size) {
        return function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return this.addClassAndItems.apply(this, ["offset" + size].concat(__slice.call(args)));
        };
      };
      return {
        offset1: offset(1),
        offset2: offset(2),
        offset3: offset(3),
        offset4: offset(4),
        offset5: offset(5),
        offset6: offset(6),
        offset7: offset(7),
        offset8: offset(8),
        offset9: offset(9),
        offset10: offset(10),
        offset11: offset(11),
        offset12: offset(12)
      };
    };
    mixins.contextual = function(prefix) {
      var context;
      context = function(suffix) {
        return function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (prefix) {
            prefix = prefix + "-";
          }
          return this.addClassAndItems.apply(this, [prefix + suffix].concat(__slice.call(args)));
        };
      };
      return {
        info: context('info'),
        warning: context('warning'),
        error: context('error'),
        success: context('success'),
        inverse: context('inverse')
      };
    };
    mixins.textContextual = function() {
      return $.extend(mixins.contextual('text'), {
        muted: function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return this.addClassAndItems("muted", args);
        }
      });
    };
    return mixins.sizeable = function(prefix) {
      var size;
      size = function(suffix) {
        return function() {
          if (prefix) {
            prefix = prefix + "-";
          }
          return this.addClass(prefix + suffix);
        };
      };
      return {
        mini: size("mini"),
        small: size("small"),
        medium: size("medium"),
        large: size("large"),
        xlarge: size("xlarge"),
        xxlarge: size("xxlarge")
      };
    };
  });

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var __slice = [].slice;

  window.BC.define('bootstrap', function(bootstrap) {
    var activate, common, mixins;
    mixins = window.BC.namespace("bootstrap.mixins");
    common = window.BC.namespace("common");
    $.extend(this, common, bootstrap);
    activate = function(el) {
      $(el).parent().parent().find('li').removeClass('active');
      return $(el).parent().addClass('active');
    };
    bootstrap.nav = function() {
      var item, items, toLi, _i, _len;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      toLi = _.isFunction(_.last(items)) ? items.pop() : function(item) {
        return li(item);
      };
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        item.on('click', function() {
          return activate(this);
        });
      }
      items = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = items.length; _j < _len1; _j++) {
          item = items[_j];
          _results.push(toLi(item));
        }
        return _results;
      })();
      if (items.length) {
        items[0].addClass('active');
      }
      return ul({
        "class": 'nav'
      }).foreach(items, function(item) {
        return item;
      });
    };
    bootstrap.tabs = function() {
      var active, content, id, links, tabList, tabs;
      tabs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      id = nextId();
      active = once("active");
      links = _.map(tabs, function(tab, index) {
        return a({
          id: id + "_" + index,
          'data-toggle': 'tab'
        }, tab.name).on('click', tab.click);
      });
      tabList = bootstrap.nav.apply(bootstrap, links).addClass('nav-tabs');
      active = once("active");
      content = div({
        "class": 'tab-content'
      }).foreach(tabs, function(tab, index) {
        return div({
          id: id + "_" + index,
          "class": 'tab-pane'
        }, tab.content).addClass(active());
      });
      return $.extend(div({
        "class": 'tabbable'
      }, tabList, content), {
        left: function() {
          return this.addClass('tabs-left');
        },
        right: function() {
          return this.addClass('tabs-right');
        },
        below: function() {
          return this.addClass('tabs-below');
        },
        stacked: function() {
          return tabList.addClass('nav-stacked');
        }
      });
    };
    bootstrap.tab = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (_.isObject(args[0]) && args.length === 1) {
        return args[0];
      }
      return {
        name: args[0],
        content: _.rest(args)
      };
    };
    bootstrap.pills = function() {
      var items;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return bootstrap.nav.apply(bootstrap, items).addClass('nav-pills');
    };
    bootstrap.pills.stacked = function() {
      var items;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return bootstrap.nav.apply(bootstrap, items).addClass('nav-pills nav-stacked');
    };
    bootstrap.pill = function(name, click) {
      return li(a(name).on('click', click));
    };
    bootstrap.navbar = function() {
      var items;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return $.extend(div({
        "class": 'navbar'
      }, div({
        "class": 'navbar-inner'
      }, items)), {
        fixedTop: function() {
          return this.addClass('navbar-fixed-top');
        },
        fixedBottom: function() {
          return this.addClass('navbar-fixed-bottom');
        },
        staticTop: function() {
          return this.addClass('navbar-static-top');
        },
        inverse: function() {
          return this.addClass('navbar-inverse');
        }
      });
    };
    bootstrap.navbar.brand = function() {
      var items;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return a.apply(null, [{
        "class": 'brand'
      }].concat(__slice.call(items)));
    };
    bootstrap.navbar.divider = function() {
      return li({
        "class": 'divider-vertical'
      });
    };
    bootstrap.navbar.form = function() {
      var items;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return form.inline.apply(form, items).addClass('navbar-form');
    };
    return bootstrap.navbar.search = function() {
      var items;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return form.inline.apply(form, items).addClass('navbar-search');
    };
  });

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var __slice = [].slice;

  window.BC.define('bootstrap', function(bootstrap) {
    var common, div, mixins;
    mixins = window.BC.namespace("bootstrap.mixins");
    common = window.BC.namespace("common");
    $.extend(this, common);
    div = function(config) {
      return function() {
        var items;
        items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return $.extend(tag('div', config).apply(null, items), mixins.spannable(), mixins.offsetable());
      };
    };
    bootstrap.div = div();
    bootstrap.div.row = div({
      "class": "row"
    });
    bootstrap.div.row.fluid = div({
      "class": "row-fluid"
    });
    bootstrap.div.container = div({
      "class": "container"
    });
    bootstrap.div.container.fluid = div({
      "class": "container-fluid"
    });
    bootstrap.div.controls = div({
      "class": "controls"
    });
    bootstrap.div.controls.row = div({
      "class": "controls controls-row"
    });
    bootstrap.left = div({
      "class": "pull-left"
    });
    bootstrap.right = div({
      "class": "pull-right"
    });
    return bootstrap.center = div({
      style: "text-align:center"
    });
  });

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var __slice = [].slice;

  window.BC.define('bootstrap', function(bootstrap) {
    var common, mixins;
    common = window.BC.namespace("common");
    mixins = window.BC.namespace("bootstrap.mixins");
    $.extend(this, common);
    bootstrap.table = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return $.extend(tag('table', {
        "class": 'table'
      }).apply(null, args), {
        stripped: function() {
          var items;
          items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return this.addClassAndItems.apply(this, ['table-striped'].concat(__slice.call(items)));
        },
        bordered: function() {
          var items;
          items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return this.addClassAndItems.apply(this, ['table-bordered'].concat(__slice.call(items)));
        },
        hover: function() {
          var items;
          items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return this.addClassAndItems.apply(this, ['table-hover'].concat(__slice.call(items)));
        },
        condensed: function() {
          var items;
          items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return this.addClassAndItems.apply(this, ['table-condensed'].concat(__slice.call(items)));
        }
      });
    };
    bootstrap.tr = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return $.extend(tag('tr').apply(null, args), mixins.contextual(''));
    };
    bootstrap.td = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return $.extend(tag('td').apply(null, args), mixins.spannable());
    };
    bootstrap.thead = tag('thead');
    bootstrap.tbody = tag('tbody');
    bootstrap.th = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return $.extend(tag('th').apply(null, args), mixins.spannable());
    };
    return bootstrap.caption = tag('caption');
  });

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var __slice = [].slice;

  window.BC.define('bootstrap', function(bootstrap) {
    var common, h, mixins;
    common = BC.namespace("common");
    mixins = window.BC.namespace("bootstrap.mixins");
    $.extend(this, common);
    h = function(size) {
      return tag("h" + size);
    };
    bootstrap.h1 = h(1);
    bootstrap.h2 = h(2);
    bootstrap.h3 = h(3);
    bootstrap.h4 = h(4);
    bootstrap.h5 = h(5);
    bootstrap.h6 = h(6);
    bootstrap.p = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return $.extend(tag("p").apply(null, args), mixins.textContextual(), {
        lead: function() {
          return this.addClass('lead');
        }
      });
    };
    bootstrap.span = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return $.extend(tag("span").apply(null, args), mixins.textContextual());
    };
    bootstrap.address = function() {
      var elements, value, values, _i, _len;
      values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      elements = [];
      for (_i = 0, _len = values.length; _i < _len; _i++) {
        value = values[_i];
        elements.push(value);
        elements.push('<br>');
      }
      elements.pop();
      return tag('address')(elements);
    };
    bootstrap.blockquote = tag('blockquote');
    bootstrap.small = tag('small');
    bootstrap.bold = tag('strong');
    bootstrap.strong = bootstrap.bold;
    bootstrap.italic = tag('em');
    bootstrap.em = bootstrap.italic;
    bootstrap.ul = tag('ul');
    bootstrap.ul.unstyled = tag('ul', {
      "class": 'unstyled'
    });
    bootstrap.ul.inline = tag('ul', {
      "class": 'inline'
    });
    bootstrap.li = tag('li');
    bootstrap.ol = tag('ol');
    bootstrap.dl = tag('dl');
    bootstrap.dl.horizontal = tag('dl', {
      "class": 'dl-horizontal'
    });
    bootstrap.dt = tag('dt');
    bootstrap.dd = tag('dd');
    bootstrap.code = tag('code');
    bootstrap.pre = tag('pre');
    bootstrap.pre.scrollable = tag('pre', {
      "class": '.pre-scrollable'
    });
    bootstrap.section = tag('section');
    bootstrap.pageHeader = tag('div', {
      "class": 'page-header'
    });
    bootstrap.type = {};
    bootstrap.type.badge = function() {
      var items;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return $.extend(bootstrap.span.apply(bootstrap, items).addClass('badge'), mixins.contextual('badge'), {
        important: function() {
          var items;
          items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return this.addClassAndItems.apply(this, ['badge-important'].concat(__slice.call(items)));
        }
      });
    };
    return bootstrap.type.label = function() {
      var items;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return $.extend(bootstrap.span.apply(bootstrap, items).addClass('label'), mixins.contextual('label'), {
        important: function() {
          var items;
          items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return this.addClassAndItems.apply(this, ['badge-important'].concat(__slice.call(items)));
        }
      });
    };
  });

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {

  window.BC.define('common', function(common) {
    return common.attributes = function(attr) {
      if (attr == null) {
        attr = {};
      }
      return {
        isAttributes: function(obj) {
          return obj && !_.isArray(obj) && _.isObject(obj) && !_.isFunction(obj['html']) && !_.isFunction(obj['init']) && !_.isFunction(obj) && !common.isModel(obj);
        },
        merge: function(attr2, override) {
          var key, value, _results;
          if (override == null) {
            override = false;
          }
          if (!this.isAttributes(attr2)) {
            throw Error(attr2 + " is expected to be attributes");
          }
          _results = [];
          for (key in attr2) {
            value = attr2[key];
            if (attr[key]) {
              if (_.isBoolean(value)) {
                if (value) {
                  _results.push(attr[key] = attr2[key]);
                } else {
                  _results.push(void 0);
                }
              } else if (_.isString(value)) {
                if (key === 'class') {
                  _results.push(attr[key] = attr[key] + " " + attr2[key]);
                } else {
                  _results.push(attr[key] = attr2[key]);
                }
              } else if (_.isNumber(value)) {
                _results.push(attr[key] = attr2[key]);
              } else if (_.isUndefined(value)) {

              } else {
                throw Error("Unexpected value " + value);
              }
            } else {
              _results.push(attr[key] = attr2[key]);
            }
          }
          return _results;
        },
        render: function() {
          var key, result, value;
          result = "";
          if (attr['id']) {
            result += "id='" + attr['id'] + "'";
          }
          for (key in attr) {
            value = attr[key];
            if (key === 'id') {
              continue;
            }
            if (_.isBoolean(value)) {
              if (value) {
                value = key;
              } else {
                continue;
              }
            }
            if (result) {
              result += " ";
            }
            result += "" + key + "='" + value + "'";
          }
          return result;
        },
        get: function(name) {
          return attr[name];
        }
      };
    };
  });

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {

  window.BC.define('common', function(common) {
    return common.bindings = function(initialItems) {
      var addInitializer, binder, domUpdated, el, identity, initializers, updateHandlers, _el;
      _el = null;
      initializers = [];
      updateHandlers = [];
      identity = function(x) {
        return x;
      };
      el = function(value) {
        if (!_.isUndefined(value)) {
          return _el = value;
        } else {
          return _el;
        }
      };
      domUpdated = function() {
        var handler, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = updateHandlers.length; _i < _len; _i++) {
          handler = updateHandlers[_i];
          _results.push(handler(_el));
        }
        return _results;
      };
      addInitializer = function(initializer) {
        if (!this.id()) {
          this.addAttr({
            id: common.nextId()
          });
        }
        initializers.push(initializer);
        return this;
      };
      binder = function(f, defaultMap) {
        if (defaultMap == null) {
          defaultMap = identity;
        }
        return function(observable, map) {
          if (map == null) {
            map = defaultMap;
          }
          addInitializer.call(this, function() {
            el()[f](map(observable.get()));
            return domUpdated();
          });
          addInitializer.call(this, function() {
            return observable.subscribe(function(newValue) {
              el()[f](map(newValue));
              return domUpdated();
            });
          });
          return this;
        };
      };
      return {
        initBindings: function(element) {
          var initializer, _i, _len, _results;
          el(element);
          _results = [];
          for (_i = 0, _len = initializers.length; _i < _len; _i++) {
            initializer = initializers[_i];
            _results.push(initializer());
          }
          return _results;
        },
        setValue: function() {},
        bindValue: function(observable) {
          var valueHandler;
          valueHandler = function(newValue) {
            el().val(newValue);
            return domUpdated();
          };
          this.setValue = function(newValue) {
            observable.unsubscribe(valueHandler);
            observable.set(newValue);
            return observable.subscribe(valueHandler);
          };
          addInitializer.call(this, function() {
            el().val(observable.get());
            return domUpdated();
          });
          addInitializer.call(this, function() {
            return observable.subscribe(valueHandler);
          });
          return this;
        },
        bindText: binder('text'),
        bindHtml: binder('html', function(x) {
          return element(x);
        }),
        bindCss: binder('css'),
        bindClass: function(observable, map) {
          var prevClass;
          if (map == null) {
            map = function(x) {
              return x;
            };
          }
          if (!this.id()) {
            this.addAttr({
              id: common.nextId()
            });
          }
          prevClass = map(observable.get());
          this.addAttr({
            "class": prevClass
          });
          observable.subscribe(function(value) {
            el().removeClass(prevClass);
            prevClass = map(value);
            el().addClass(prevClass);
            return domUpdated();
          });
          return this;
        },
        bindVisible: function(observable, condition) {
          if (condition == null) {
            condition = identity;
          }
          return this.bindCss(observable, function(value) {
            return {
              display: condition(value) ? "" : "none"
            };
          });
        },
        bindDisabled: function(observable, condition) {
          if (condition == null) {
            condition = function(x) {
              return x;
            };
          }
          return this.bindAttr(observable, function(value) {
            return {
              disabled: condition(value)
            };
          });
        },
        bindAttr: binder('prop'),
        on: function(events, selector, handler) {
          var _this = this;
          if (!handler) {
            handler = selector;
            selector = "";
          }
          addInitializer.call(this, function() {
            return el().on(events, selector, _this, handler);
          });
          return this;
        },
        onUpdate: function(handler) {
          updateHandlers.push(handler);
          return this;
        },
        onInit: function(handler) {
          return addInitializer.call(this, function() {
            return handler(el());
          });
        },
        foreach: function(collection, render) {
          var add, collectionItems, getElOrTbody, index, item, remove, removeItems, renderAll, tag, updateItem;
          getElOrTbody = function() {
            var tbody;
            tbody = el().children('tbody');
            if (tbody.length !== 0) {
              return tbody;
            } else {
              return el();
            }
          };
          tag = this;
          if (!this.id()) {
            this.addAttr({
              id: common.nextId()
            });
          }
          collectionItems = (function() {
            if (_.isFunction(collection)) {
              return collection();
            } else if (_.isArray(collection)) {
              return collection;
            } else {
              throw Error(collection + " is expected to be an Array or model");
            }
          })();
          index = 0;
          this.addItems.apply(this, (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = collectionItems.length; _i < _len; _i++) {
              item = collectionItems[_i];
              _results.push(render(item, index++));
            }
            return _results;
          })());
          add = function(value, index) {
            if (index === -1) {
              return;
            }
            if (getElOrTbody().children().length === 0 || index === 0) {
              getElOrTbody().prepend(common.element(render(value, index, tag)));
            } else {
              getElOrTbody().children().eq(index - 1).after(common.element(render(value, index, tag)));
            }
            return domUpdated();
          };
          remove = function(index) {
            getElOrTbody().children().eq(index).remove();
            return domUpdated();
          };
          renderAll = function(items) {
            var elements;
            index = 0;
            elements = (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = initialItems.length; _i < _len; _i++) {
                item = initialItems[_i];
                _results.push(common.element(item));
              }
              return _results;
            })();
            elements = elements.concat((function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = items.length; _i < _len; _i++) {
                item = items[_i];
                _results.push(common.element(render(item, index++)));
              }
              return _results;
            })());
            el().html(elements);
            return domUpdated();
          };
          removeItems = function(items, indexes) {
            var _i, _len, _results;
            indexes = indexes.sort().reverse();
            _results = [];
            for (_i = 0, _len = indexes.length; _i < _len; _i++) {
              index = indexes[_i];
              _results.push(remove(index));
            }
            return _results;
          };
          updateItem = function(value, index, oldIndex) {
            if (index < oldIndex) {
              add(value, index);
              return remove(oldIndex + (index === -1 ? 0 : 1));
            } else if (index > oldIndex) {
              remove(oldIndex);
              return add(value, index);
            }
          };
          if (_.isFunction(collection.subscribe)) {
            collection.subscribe(collection.actionHandler({
              replaceAll: renderAll,
              updateView: renderAll,
              add: add,
              remove: removeItems,
              update: updateItem
            }));
          }
          return this;
        },
        el: el
      };
    };
  });

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var __slice = [].slice;

  window.BC.define('common', function(common) {
    var isCollection, isComposite, isModel;
    isComposite = function(item) {
      return item && _.isFunction(item.html) && _.isFunction(item.init);
    };
    isModel = function(item) {
      return item && !isComposite(item) && _.isFunction(item.subscribe) && _.isFunction(item.get) && _.isFunction(item.set) && _.isFunction(item.publish);
    };
    isCollection = function(item) {
      return item && _.isFunction(item.add) && _.isFunction(item.remove) && _.isFunction(item.filter) && _.isFunction(item.count) && _.isFunction(item.total);
    };
    common.isValid = function(item) {
      return _.isUndefined(item) || _.isString(item) || _.isNumber(item) || _.isArray(item) || _.isFunction(item.html) || common.isModel(item);
    };
    common.toHtml = function(item) {
      var subitem;
      if (_.isUndefined(item)) {
        return "";
      } else if (isComposite(item)) {
        return item.html();
      } else if (_.isString(item)) {
        return item;
      } else if (_.isNumber(item)) {
        return item;
      } else if (_.isBoolean(item)) {
        return item.toString();
      } else if (_.isArray(item)) {
        return ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = item.length; _i < _len; _i++) {
            subitem = item[_i];
            _results.push(common.toHtml(subitem));
          }
          return _results;
        })()).join(" ");
      } else if (isModel(item)) {
        return common.toHtml(item.get());
      } else {
        throw Error(item + " is expected to be String, Number, Array, Boolean, undefined, model or have .html() function");
      }
    };
    common.init = function(item, context) {
      var subitem;
      if (_.isUndefined(item)) {

      } else if (isComposite(item)) {
        return item.init(context);
      } else if (_.isString(item)) {

      } else if (_.isNumber(item)) {

      } else if (_.isBoolean(item)) {

      } else if (_.isArray(item)) {
        return ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = item.length; _i < _len; _i++) {
            subitem = item[_i];
            _results.push(common.init(subitem, context));
          }
          return _results;
        })()).join(" ");
      } else if (isModel(item)) {
        return common.init(item.get());
      } else {
        throw Error(item + " is expected to be String, Number, Array, Booelan, undefined, model or have .init() function");
      }
    };
    common.nextId = (function() {
      var id;
      id = 0;
      return function() {
        return ++id;
      };
    })();
    common.observable = function(_get, _set) {
      var enabled, listeners;
      listeners = [];
      enabled = true;
      return {
        subscribe: function(listener) {
          if (!_.contains(listeners, listener)) {
            listeners.push(listener);
          }
          return this;
        },
        publish: function(newValue, path) {
          var listener, _i, _len;
          if (enabled) {
            for (_i = 0, _len = listeners.length; _i < _len; _i++) {
              listener = listeners[_i];
              listener(newValue, path);
            }
          }
          return this;
        },
        unsubscribe: function(listener) {
          return listeners = _.filter(listeners, function(item) {
            return item !== listener;
          });
        },
        get: function() {
          return _get();
        },
        set: function(newValue) {
          return _set(newValue);
        },
        enableNotifications: function() {
          return enabled = true;
        },
        disableNotifications: function() {
          return enabled = false;
        }
      };
    };
    common.element = function(composite) {
      var el;
      if (_.isUndefined(composite)) {

      } else if (_.isString(composite)) {
        return composite;
      } else if (_.isNumber(composite)) {
        return composite;
      } else if (_.isBoolean(composite)) {
        return composite.toString();
      } else if (_.isFunction(composite.html)) {
        el = $(composite.html());
        composite.init(el);
        return el;
      } else if (common.isModel(composite)) {
        return common.element(composite._get());
      } else {
        throw Error(composite + " is expected to be String, Number, Boolean or composite");
      }
    };
    common.partial = function() {
      var fixedArgs, fn;
      fn = arguments[0], fixedArgs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return fn.apply(null, fixedArgs.concat(args));
      };
    };
    common.once = function(value) {
      var first;
      first = true;
      return function() {
        if (first) {
          first = false;
          return value;
        } else {
          return void 0;
        }
      };
    };
    common.isComposite = isComposite;
    common.isModel = isModel;
    common.isCollection = isCollection;
    return common.sameValues = function(arr1, arr2) {
      var i, result, _i, _ref;
      result = arr1.length === arr2.length;
      if (result) {
        for (i = _i = 0, _ref = arr1.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (arr1[i] !== arr2[i]) {
            result = false;
          }
        }
      }
      return result;
    };
  });

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var __slice = [].slice;

  window.BC.define('common', function(common) {
    return common.tag = function(name, initialAttr) {
      if (initialAttr == null) {
        initialAttr = {};
      }
      return function() {
        var attr, bindings, index, item, items, o, result, _i, _j, _len, _len1;
        items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        attr = common.attributes(_.clone(initialAttr));
        if (items.length > 0 && attr.isAttributes(items[0])) {
          attr.merge(items[0]);
          items = _.rest(items);
        }
        if (items.length === 1 && common.isModel(items[0])) {
          o = items[0];
          items.pop();
        } else {
          for (_i = 0, _len = items.length; _i < _len; _i++) {
            item = items[_i];
            if (common.isModel(item)) {
              throw Error(items + " should have only one model");
            }
          }
        }
        index = 0;
        for (_j = 0, _len1 = items.length; _j < _len1; _j++) {
          item = items[_j];
          index++;
          if (!isValid(item)) {
            throw Error("Item " + item + " at position " + index + " is expected to be String, Number, Array, undefined" + " or have .html() function");
          }
        }
        bindings = common.bindings(_.clone(items));
        result = $.extend(bindings, {
          id: function() {
            return attr.get('id');
          },
          html: function() {
            return _.template("<" + name + " <%=attr%>><% _.each(items, function(item) { %><%=toHtml(item)%><% }) %></" + name + ">", {
              items: items,
              toHtml: common.toHtml,
              attr: attr.render()
            });
          },
          init: function(context) {
            var el, id;
            common.init(items, context);
            id = this.id();
            if (id && context.attr('id') === id.toString()) {
              el = context;
            } else {
              if (id) {
                el = context.find('#' + id).first();
              }
            }
            return bindings.initBindings(el);
          },
          addClass: function(name) {
            if (name) {
              attr.merge({
                "class": name
              });
            }
            return this;
          },
          addItems: function() {
            var newItems;
            newItems = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            items = items.concat(newItems);
            return this;
          },
          addClassAndItems: function() {
            var items, name;
            name = arguments[0], items = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
            this.addClass(name);
            return this.addItems.apply(this, items);
          },
          addAttr: function(value) {
            attr.merge(value);
            return this;
          },
          classes: function() {
            return attr.get('class');
          },
          getAttr: function(name) {
            return attr.get(name);
          }
        });
        if (o) {
          result.bindHtml(o);
        }
        return result;
      };
    };
  });

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var common, composite, getModel, html, input, models, tagname, _i, _len,
    __slice = [].slice;

  html = window.BC.namespace("html");

  common = window.BC.namespace("common");

  models = window.BC.namespace("models");

  $.extend(this, common);

  composite = ["abbr", "acronym", "address", "applet", "area", "b", "base", "basefont", "bdo", "big", "blockquote", "br", "button", "caption", "center", "cite", "code", "col", "colgroup", "dd", "del", "dfn", "dir", "div", "dl", "dt", "em", "fieldset", "font", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "hr", "html", "i", "iframe", "img", "input", "ins", "isindex", "kbd", "label", "legend", "li", "link", "map", "menu", "meta", "noframes", "noscript", "object", "ol", "optgroup", "option", "p", "param", "pre", "q", "s", "samp", "script", "select", "small", "span", "strike", "strong", "style", "sub", "sup", "table", "tbody", "td", "tfoot", "th", "thead", "title", "tr", "tt", "u", "ul", "var", "header", "section", "footer"];

  for (_i = 0, _len = composite.length; _i < _len; _i++) {
    tagname = composite[_i];
    html[tagname] = tag(tagname);
  }

  getModel = function(items) {
    var model;
    model = _.last(items);
    if (_.isUndefined(model) || !common.isModel(model)) {
      model = models.model("");
    } else {
      items.pop();
    }
    return model;
  };

  input = function() {
    var changeEvents, getValue, init, items;
    init = arguments[0], changeEvents = arguments[1], getValue = arguments[2], items = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
    return tag('input', init).apply(null, items).on(changeEvents, function(e) {
      return e.data.setValue(getValue(this));
    });
  };

  html.input = {
    text: function() {
      var items, model;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      model = getModel(items);
      return $.extend(input.apply(null, [{
        type: 'text'
      }, 'keyup change', (function(el) {
        return $(el).val();
      })].concat(__slice.call(items))), {
        placeholder: function(value) {
          return this.addAttr({
            'placeholder': value
          });
        }
      }).bindValue(model);
    },
    password: function() {
      var items, model;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      model = getModel(items);
      return this.text.apply(this, items).addAttr({
        type: 'password'
      }).bindValue(model);
    },
    search: function() {
      var items, model;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      model = getModel(items);
      return this.text.apply(this, items).addClass("search-query").bindValue(model);
    },
    checkbox: function() {
      var items, model;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      model = getModel(items);
      return input.apply(null, [{
        type: 'checkbox'
      }, 'click', (function(el) {
        return $(el).is(':checked');
      })].concat(__slice.call(items))).bindValue(model).bindAttr(model, function() {
        return {
          checked: model.get()
        };
      });
    },
    radio: function() {
      var items, model, value;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      model = getModel(items);
      value = items[0].value;
      return input.apply(null, [{
        type: 'radio'
      }, 'click', (function() {
        return value;
      })].concat(__slice.call(items))).bindValue(model).bindAttr(model, function() {
        return {
          checked: model.get() === value
        };
      });
    },
    submit: function(name, click) {
      return tag('input')(name).addAttr({
        type: 'submit'
      }).on('click', click);
    }
  };

  html.select = function() {
    var items, model;
    items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    model = getModel(items);
    return tag('select').apply(null, items).on('change', function(e) {
      return e.data.setValue($(this).val());
    }).bindValue(model);
  };

  html.div = tag("div");

  html.span = tag("span");

  html.textarea = function(config) {
    return tag('textarea', config)().on('keyup', function(e) {
      return e.data.publish($(this).val());
    }).observable();
  };

  html.button = function() {
    var args, click, last;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    last = _.last(args);
    click = function() {
      return false;
    };
    if (_.isFunction(last)) {
      click = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        last.apply(null, args);
        return false;
      };
      args = args.slice(0, args.length - 1);
    }
    return tag('button').apply(null, args).on('click', click);
  };

  html.a = function() {
    var args, click, last;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    last = _.last(args);
    click = function() {
      return false;
    };
    if (_.isFunction(last)) {
      click = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        last.apply(null, args);
        return false;
      };
      args = args.slice(0, args.length - 1);
    }
    return tag('a', {
      href: '#'
    }).apply(null, args).on('click', click);
  };

  html.body = function(composite) {
    return $('body').html(common.element(composite));
  };

  html.select = function() {
    var items;
    items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return $.extend(tag('select').apply(null, items).observable().on('change', function(e) {
      return e.data.publish($(this).val());
    }));
  };

  html.select.multiple = function() {
    var items;
    items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return bootstrap.select({
      multiple: 'multiple'
    }, items);
  };

  html.option = function(text, value) {
    return tag('option', {
      value: value
    })(text);
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {

  window.BC.define('models', function(models) {
    var actions, assertArray, common, getIndexes;
    common = window.BC.namespace("common");
    assertArray = function(arr) {
      if (!_.isArray(arr)) {
        throw Error(arr + " is expected to be an array");
      }
    };
    getIndexes = function(items, allItems, predicate) {
      var i, indexes, item, usedIndex, _i, _j, _len, _ref;
      indexes = [];
      usedIndex = {};
      for (_i = 0, _len = allItems.length; _i < _len; _i++) {
        item = allItems[_i];
        if (predicate(item)) {
          for (i = _j = 0, _ref = items.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
            if (!usedIndex[i] && items[i] === item) {
              indexes.push(i);
              usedIndex[i] = true;
            }
          }
        }
      }
      return indexes;
    };
    actions = {
      REPLACE_ALL: 'replace_all',
      UPDATE_VIEW: 'update_view',
      ADD: 'add',
      REMOVE: 'remove',
      UPDATE: 'update'
    };
    return models.collection = function(initial, o) {
      var action, allItems, callUpdate, collection, compareFunction, defaultCompare, filter, items, storeHandlers, toPredicate, update;
      if (initial == null) {
        initial = [];
      }
      if (o == null) {
        o = null;
      }
      assertArray(initial);
      allItems = initial;
      items = allItems;
      compareFunction = void 0;
      filter = function() {
        return true;
      };
      action = function(name, value, index, oldIndex) {
        if (index == null) {
          index = -1;
        }
        if (oldIndex == null) {
          oldIndex = -1;
        }
        return {
          name: name,
          value: value,
          index: index,
          oldIndex: oldIndex
        };
      };
      if (!o) {
        o = common.observable((function() {
          return collection();
        }), function(newValue) {
          return collection(newValue);
        });
      }
      collection = function(arg) {
        if (_.isUndefined(arg)) {
          return items;
        } else {
          assertArray(arg);
          allItems = arg;
          return update(function() {
            return action(actions.REPLACE_ALL, items);
          });
        }
      };
      callUpdate = function(item) {
        var oldIndex;
        oldIndex = items.indexOf(item);
        return update(function() {
          return action(actions.UPDATE, item, items.indexOf(item), oldIndex);
        });
      };
      update = function(actionCallback) {
        var actionObject, item, oldItems, _i, _len;
        if (compareFunction) {
          allItems.sort(compareFunction);
        }
        oldItems = items;
        items = _.filter(allItems, filter);
        for (_i = 0, _len = allItems.length; _i < _len; _i++) {
          item = allItems[_i];
          if (common.isModel(item)) {
            item.subscribe(callUpdate);
          }
        }
        actionObject = actionCallback();
        o.publish(items, actionObject);
        if (actionObject.name === actions.UPDATE) {
          if (!common.sameValues(_.without(oldItems, actionObject.item), _.without(items, actionObject.item))) {
            return o.publish(items, action(actions.UPDATE_VIEW, items));
          }
        }
      };
      update(function() {
        return action(actions.REPLACE_ALL, items);
      });
      toPredicate = function(arg) {
        if (_.isFunction(arg)) {
          return arg;
        } else {
          return function(item) {
            return item === arg;
          };
        }
      };
      collection.add = function(item) {
        allItems.push(item);
        return update(function() {
          return action(actions.ADD, item, items.lastIndexOf(item));
        });
      };
      collection.remove = function(item) {
        var predicate, removeIndexes, removeItems;
        predicate = toPredicate(item);
        removeIndexes = getIndexes(items, allItems, predicate);
        removeItems = _.filter(allItems, predicate);
        allItems = _.filter(allItems, function(item) {
          return !predicate(item);
        });
        return update(function() {
          return action(actions.REMOVE, removeItems, removeIndexes);
        });
      };
      collection.clear = function() {
        allItems = [];
        return update(function() {
          return action(actions.REPLACE_ALL, items);
        });
      };
      collection.filter = function(arg) {
        filter = toPredicate(arg);
        return update(function() {
          return action(actions.UPDATE_VIEW, items);
        });
      };
      collection.count = function(arg) {
        if (_.isUndefined(arg)) {
          return items.length;
        } else if (_.isFunction(arg)) {
          return _.reduce(items, (function(memo, item) {
            if (arg(item)) {
              return 1 + memo;
            } else {
              return memo;
            }
          }), 0);
        } else {
          throw Error(arg + " is expected to be function or undefined");
        }
      };
      collection.total = function(arg) {
        if (_.isUndefined(arg)) {
          return allItems.length;
        } else if (_.isFunction(arg)) {
          return _.reduce(allItems, (function(memo, item) {
            if (arg(item)) {
              return 1 + memo;
            } else {
              return memo;
            }
          }), 0);
        } else {
          throw Error(arg + " is expected to be function or undefined");
        }
      };
      collection.find = function(predicate) {
        var result;
        result = _.filter(items, predicate);
        if (result.length === 0) {
          return void 0;
        } else if (result.length === 1) {
          return result[0];
        } else {
          return result;
        }
      };
      collection.indexOf = function(item) {
        return _.indexOf(items, item);
      };
      collection.at = function(index) {
        return items[index];
      };
      defaultCompare = function(a, b) {
        if (a > b) {
          return 1;
        } else if (a < b) {
          return -1;
        } else {
          return 0;
        }
      };
      collection.sort = function(f) {
        if (f == null) {
          f = defaultCompare;
        }
        compareFunction = f;
        return update(function() {
          return action(actions.UPDATE_VIEW, items);
        });
      };
      collection.sortBy = function(field) {
        return collection.sort(function(item1, item2) {
          if (field(item1) < field(item2)) {
            return -1;
          } else if (field(item1) > field(item2)) {
            return 1;
          } else {
            return 0;
          }
        });
      };
      collection.contains = function(item) {
        return _.contains(items, item);
      };
      collection.toJSON = function() {
        return items;
      };
      collection.actionHandler = function(handler) {
        return function(items, action) {
          if (action.name === actions.REPLACE_ALL && handler.replaceAll) {
            return handler.replaceAll(action.value);
          } else if (action.name === actions.UPDATE_VIEW && handler.updateView) {
            return handler.updateView(action.value);
          } else if (action.name === actions.ADD && handler.add) {
            return handler.add(action.value, action.index);
          } else if (action.name === actions.REMOVE && handler.remove) {
            return handler.remove(action.value, action.index);
          } else if (action.name === actions.UPDATE && handler.update) {
            return handler.update(action.value, action.index, action.oldIndex);
          }
        };
      };
      storeHandlers = [];
      collection.subscribeStore = function(handler) {
        storeHandlers.push(handler);
        return this.subscribe(handler);
      };
      collection.disableStoreNotifications = function() {
        var handler, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = storeHandlers.length; _i < _len; _i++) {
          handler = storeHandlers[_i];
          _results.push(this.unsubscribe(handler));
        }
        return _results;
      };
      collection.enableStoreNotifications = function() {
        var handler, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = storeHandlers.length; _i < _len; _i++) {
          handler = storeHandlers[_i];
          _results.push(this.subscribe(handler));
        }
        return _results;
      };
      return $.extend(collection, o);
    };
  });

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {

  window.BC.define('models', function(models) {
    var common, latestObservable, makeObservable, merge;
    common = window.BC.namespace("common");
    models.model = function(arg, o) {
      var model, value;
      value = arg;
      model = function(newValue) {
        var oldValue;
        if (_.isUndefined(newValue)) {
          return value;
        } else {
          oldValue = value;
          value = newValue;
          o.publish(value);
          return oldValue;
        }
      };
      model.toJSON = function() {
        return value;
      };
      if (!o) {
        o = common.observable((function() {
          return model();
        }), function(newValue) {
          return model(newValue);
        });
      }
      return $.extend(model, o);
    };
    latestObservable = null;
    makeObservable = function(value, observable) {
      var item;
      if (common.isModel(value)) {

      } else if (_.isArray(value)) {
        value = models.collection((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = value.length; _i < _len; _i++) {
            item = value[_i];
            _results.push(makeObservable(item));
          }
          return _results;
        })(), observable);
      } else if (_.isObject(value)) {
        value = models.object(value, observable);
      }
      return value;
    };
    models.object = function(obj, o) {
      var key, keyObservable, listener, observables, prop, result, value;
      if (!_.isObject(obj)) {
        throw Error(obj + " is expected to be an object");
      }
      result = {};
      observables = {};
      if (!o) {
        o = common.observable((function() {
          return result;
        }), function(newValue) {
          return merge(result, newValue);
        });
      }
      for (key in obj) {
        value = obj[key];
        keyObservable = function(key) {
          return common.observable((function() {
            return result[key];
          }), (function(newValue) {
            return result[key] = newValue;
          }));
        };
        observables[key] = keyObservable(key);
        value = makeObservable(value, observables[key]);
        listener = function(key) {
          return function(newValue, valuePath) {
            return o.publish(result, valuePath);
          };
        };
        observables[key].subscribe(listener(key));
        prop = function(key, value) {
          return {
            get: function() {
              latestObservable = observables[key];
              latestObservable.key = key;
              return value;
            },
            set: function(newValue) {
              var oldValue;
              oldValue = value;
              value = makeObservable(newValue, observables[key]);
              observables[key].publish(value, "");
              latestObservable = observables[key];
              return oldValue;
            },
            enumerable: true
          };
        };
        Object.defineProperty(result, key, prop(key, value));
      }
      return $.extend(result, o);
    };
    models.map = function(observable, map) {
      var o, value;
      if (map == null) {
        map = function(x) {
          return x;
        };
      }
      if (!common.isModel(observable)) {
        observable = latestObservable;
      }
      value = map(observable.get());
      o = common.observable((function() {
        return value;
      }), function() {
        throw Error("Mapped values don't support set");
      });
      observable.subscribe(function(newValue, path) {
        value = map(newValue);
        return o.publish(value, path);
      });
      return o;
    };
    models.negate = function(observable) {
      return models.map(observable, function(x) {
        return !x;
      });
    };
    models.bind = function(field) {
      var result;
      if (!latestObservable) {
        throw Error("bind should be used like bind(obj.field)");
      }
      result = latestObservable;
      latestObservable = null;
      return result;
    };
    models.guid = function() {
      var s4;
      s4 = function() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
      };
      return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
    };
    return merge = function(left, right) {
      var key, value;
      if (common.isModel(right)) {
        throw Error("merge is expected to work only with basic json objects.");
      }
      left.disableNotifications();
      for (key in left) {
        value = left[key];
        latestObservable = null;
        left[key];
        if (latestObservable) {
          if (!_.isArray(right[key]) && _.isObject(right[key])) {
            merge(left[key], right[key]);
          } else {
            left[key] = right[key];
          }
        }
      }
      left.enableNotifications();
      return left.publish(left);
    };
  });

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var __slice = [].slice;

  window.BC.define('store', function(store) {
    var bindings, channels, models, pusher, rates;
    rates = window.BC.namespace("rates");
    $.extend(this, rates);
    bindings = {
      REPLACE: 'client-replaceAll',
      ADD: 'client-add',
      REMOVE: 'client-remove',
      UPDATE: 'client-update'
    };
    models = window.BC.namespace("models");
    pusher = new Pusher('9e1249843e69a619bc84');
    channels = {};
    return store.pusher = function(collection, channelName, id, request_rate, initCallback) {
      var add, channel, eventHandler, handler, kay, remove, replaceAll, update, value, _i, _len;
      if (request_rate == null) {
        request_rate = NO_LIMIT;
      }
      if (initCallback == null) {
        initCallback = (function() {});
      }
      channelName = 'private-' + channelName;
      if (channels[channelName]) {
        for (value = _i = 0, _len = bindings.length; _i < _len; value = ++_i) {
          kay = bindings[value];
          channels[channelName].unbind(value);
        }
        pusher.unsubscribe(channelName);
      }
      channels[channelName] = pusher.subscribe(channelName);
      channel = channels[channelName];
      replaceAll = function(items) {
        return channel.trigger('client-replaceAll', items);
      };
      add = function(items) {
        return channel.trigger('client-add', items);
      };
      remove = function(items) {
        return channel.trigger('client-remove', items);
      };
      update = function(items) {
        return channel.trigger('client-update', items);
      };
      handler = collection.actionHandler({
        replaceAll: rate(replaceAll, request_rate, idempotent()),
        updateView: (function() {}),
        add: rate(add, request_rate, aggregate()),
        remove: rate(remove, request_rate, aggregate()),
        update: rate(update, request_rate, idempotent(id))
      });
      channel.bind('pusher:subscription_succeeded', function() {
        collection.subscribeStore(handler);
        return initCallback();
      });
      eventHandler = function(f) {
        return function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          collection.disableStoreNotifications();
          f.apply(null, args);
          return collection.enableStoreNotifications();
        };
      };
      channel.bind(bindings.REPLACE, eventHandler(function(items) {
        var item;
        return collection((function() {
          var _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = items.length; _j < _len1; _j++) {
            item = items[_j];
            _results.push(models.object(item));
          }
          return _results;
        })());
      }));
      channel.bind(bindings.ADD, eventHandler(function(items) {
        var item, _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = items.length; _j < _len1; _j++) {
          item = items[_j];
          _results.push(collection.add(models.object(item)));
        }
        return _results;
      }));
      channel.bind(bindings.REMOVE, eventHandler(function(items) {
        var item, _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = items.length; _j < _len1; _j++) {
          item = items[_j];
          _results.push(collection.remove(comparator(item)));
        }
        return _results;
      }));
      return channel.bind(bindings.UPDATE, eventHandler(function(items) {
        var collectionItem, item, _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = items.length; _j < _len1; _j++) {
          item = items[_j];
          collectionItem = collection.find(function(item2) {
            return id(item) === id(item2);
          });
          if (collectionItem) {
            _results.push(collectionItem.set(item));
          } else {
            _results.push(collection.add(models.object(item)));
          }
        }
        return _results;
      }));
    };
  });

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {

  window.BC.define('rates', function(rates) {
    rates.NO_LIMIT = -1;
    rates.idempotent = function(id) {
      var isSet, value;
      if (id == null) {
        id = (function() {
          return 1;
        });
      }
      value = {};
      isSet = false;
      return {
        set: function(newValue) {
          isSet = true;
          return value[id(newValue)] = newValue;
        },
        get: function() {
          var result;
          isSet = false;
          result = _.values(value);
          value = {};
          return result;
        },
        isSet: function() {
          return isSet;
        }
      };
    };
    rates.aggregate = function() {
      var isSet, value;
      value = [];
      isSet = false;
      return {
        set: function(newValue) {
          isSet = true;
          if (!_.isArray(newValue)) {
            newValue = [newValue];
          }
          return value = value.concat(newValue);
        },
        get: function() {
          var result;
          isSet = false;
          result = value;
          value = [];
          return result;
        },
        isSet: function() {
          return isSet;
        }
      };
    };
    return rates.rate = function(action, request_rate, aggregator) {
      var hasTimeout;
      hasTimeout = false;
      return function(item) {
        var handler;
        aggregator.set(item);
        if (request_rate === rates.NO_LIMIT) {
          return action(aggregator.get());
        } else if (!hasTimeout) {
          action(aggregator.get());
          hasTimeout = true;
          handler = function() {
            if (aggregator.isSet()) {
              action(aggregator.get());
            }
            return hasTimeout = false;
          };
          return window.setTimeout(handler, 1000 / request_rate);
        }
      };
    };
  });

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {

  window.BC.define('store', function(store) {
    var models, rates,
      _this = this;
    models = window.BC.namespace("models");
    rates = window.BC.namespace("rates");
    return store.mongoLab = function(collection, mongoDatabase, mongoCollection, request_rate) {
      var add, apiKey, baseUrl, getIds, handler, id, initialItems, remove, request, updateCollection, updateItems, url;
      if (request_rate == null) {
        request_rate = rates.NO_LIMIT;
      }
      apiKey = "xR9PQZeYGV7K40N8rXp_RpdJMjQXAgiD";
      baseUrl = "https://api.mongolab.com/api/1/databases/" + mongoDatabase + "/collections/" + mongoCollection + "?apiKey=" + apiKey;
      url = function(query) {
        if (query) {
          query = '&q=' + query;
        }
        return baseUrl + query;
      };
      request = function(method, items, query) {
        if (query == null) {
          query = "";
        }
        return $.ajax({
          url: url(query),
          data: JSON.stringify(items),
          type: method,
          contentType: "application/json"
        });
      };
      initialItems = collection();
      collection([]);
      $.get(baseUrl, function(result) {
        var item;
        if (result.length === 0) {
          request('POST', initialItems);
          collection(initialItems);
        } else {
          collection((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = result.length; _i < _len; _i++) {
              item = result[_i];
              _results.push(models.object(item));
            }
            return _results;
          })());
        }
        return collection.subscribeStore(handler);
      });
      id = function(item) {
        return item._id;
      };
      getIds = function(items) {
        var ids, item;
        ids = ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = items.length; _i < _len; _i++) {
            item = items[_i];
            _results.push(JSON.stringify(item._id));
          }
          return _results;
        })()).join(",");
        return "{_id:{$in:[" + ids + "]}}";
      };
      updateCollection = function(items) {
        return request('PUT', items);
      };
      add = function(items) {
        return request('POST', items);
      };
      remove = function(items) {
        return request('PUT', [], getIds(items));
      };
      updateItems = function(items) {
        return request('PUT', items, getIds(items));
      };
      $.extend(_this, rates);
      return handler = collection.actionHandler({
        replaceAll: rate(updateCollection, request_rate, idempotent()),
        updateView: (function() {}),
        add: rate(add, request_rate, aggregate()),
        remove: rate(remove, request_rate, aggregate()),
        update: rate(updateItems, request_rate, idempotent(id))
      });
    };
  });

}).call(this);
