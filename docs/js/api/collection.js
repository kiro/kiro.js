// Generated by CoffeeScript 1.4.0
(function() {
  var bootstrap, docs, models, showCollection;

  docs = window.BC.namespace("docs");

  docs.api = window.BC.namespace("docs.api");

  bootstrap = window.BC.namespace("bootstrap");

  models = window.BC.namespace("models");

  $.extend(this, bootstrap, models, docs);

  showCollection = function() {};

  docs.api.collection = function() {
    return section(h1("Collection"), docs.code.collection(), example("collection", "Collection contains items. If the items are models it subscribes to them\nand the collection is updated when a model changes.\n<p><code>items = collection(array)</code> constructs a new collection</p>\n<p><code>items()</code> returns the values in the collection</p>\n<p><code>items([1, 2, 3])</code> replaces all values in a collection</p>", function() {
      var items;
      items = collection([1, 2, 3]);
      showCollection = function(collection) {
        return div({
          "class": 'circles'
        }).foreach(collection, function(item) {
          return div({
            "class": 'circle'
          }, item).on('click', function() {
            return collection.remove(item);
          });
        });
      };
      return body(showCollection(items), button('Set', function() {
        return items([4, 5, 6]);
      }));
    }), example(".add", "<p><code>.add(value)</code> adds an item to the collection. </p>", function() {
      var numbers, value;
      numbers = collection([1, 2, 3]);
      value = model("");
      return body(showCollection(numbers), form.inline(input.text(value), button.success('Add', function() {
        return numbers.add(value(""));
      })));
    }), example(".remove", "<p><code>.remove(item)</code> removes item</p>\n<p><code>.remove(predicate)</code> remove all items that match the predicate.</p>", function() {
      var biggerThan, limit, numbers;
      numbers = collection([1, 2, 3, 4, 5, 6]);
      limit = model(3);
      biggerThan = function(value) {
        return function(number) {
          return number > value;
        };
      };
      return body(form.inline(button.danger("Remove", function() {
        return numbers.remove(biggerThan(limit()));
      }), " bigger than ", input.text(limit)), "or click on a number to remove it", showCollection(numbers));
    }), example(".clear", "Removes all items from a collection.", function() {
      var numbers;
      numbers = collection([1, 2, 3, 4]);
      return body(showCollection(numbers), button.danger("clear", function() {
        return numbers.clear();
      }));
    }), example(".filter", "Filters items in the collection. The filtered items are not removed and\nonce a new filter is set it's applied on all of the initial items.\n\n<p><code>.filter(predicate)</code> filters all items that match the predicate </p>\n<p><code>.filter(string)</code> filters all objects who don't have string field containing the string</p>", function() {
      var biggerThan, limit, numbers;
      numbers = collection([1, 2, 3, 4, 5, 6]);
      limit = model(3);
      biggerThan = function(number) {
        return number > limit();
      };
      return body(showCollection(numbers), form.inline(button.danger("Filter", function() {
        return numbers.filter(biggerThan);
      }), " bigger than ", input.text(limit).span1()));
    }), example(".count", "Counts the current items in a collection. If there is a filter it counts only the\nitems that match it.\n\n<p><code>.count()</code> Returns the number of the current items in the collection.</p>\n<p><code>.count(predicate)</code> Returns the number of the current items in the collection that match the predicate.</p>", function() {
      var numbers;
      numbers = collection([1, 2, 3, 4, 5, 6]);
      numbers.filter(function(number) {
        return number > 2;
      });
      return body("Click on a number to remove it", showCollection(numbers), span(map(numbers, function() {
        return 'Count ' + numbers.count();
      })), span(map(numbers, function() {
        return 'Even ' + numbers.count(function(number) {
          return number % 2 === 0;
        });
      })));
    }), example(".total", "Counts all items in a collection, including the filtered.\n\n<p><code>.total()</code> Returns the number of items in the collection.</p>\n<p><code>.total(predicate)</code> Returns the number of items in the collection that match the predicate</p>", function() {
      var even, numbers;
      numbers = collection([1, 2, 3, 4, 5, 6]);
      numbers.filter(function(number) {
        return number > 2;
      });
      even = function(number) {
        return number % 2 === 0;
      };
      return body("Click on a number to remove it", showCollection(numbers), p(map(numbers, function() {
        return "Showing " + (numbers.count()) + " of " + (numbers.total());
      })), p(map(numbers, function() {
        return 'Even ' + numbers.total(even);
      })));
    }), example(".find", "<p><code>.find(predicate)</code> gets the items matching the predicate.</p>\nIf there is only one match it returns the value.\nIf there are multiple matches it returns an array.", function() {
      var byId, user, users;
      user = function(id, name) {
        return {
          id: id,
          name: name
        };
      };
      users = collection([user(1, "Check"), user(2, "Test user"), user(3, "User 123")]);
      byId = function(id) {
        return function(user) {
          return user.id.toString() === id.toString();
        };
      };
      return body(p(JSON.stringify(users.find(byId(1)))), p(JSON.stringify(users.find(function(item) {
        return item.id > 1;
      }))));
    }), example(".sort", "<p>Sorts the elements in the collection and maintains the collection in sorted order.</p>\n<p><code>sort()</code> sorts the items using default ordering.</p>\n<p><code>sort(comparator)</code> sorts the items using a comparator.</p>", function() {
      var comparator, factor, numbers, text;
      numbers = collection([2, 6, 3]);
      numbers.sort();
      factor = 1;
      comparator = function(left, right) {
        if (left > right) {
          return 1 * factor;
        } else if (left < right) {
          return -1 * factor;
        } else {
          return 0;
        }
      };
      text = model("");
      return body("Click on a number to remove it", showCollection(numbers), form.inline(input.text(text), button.primary("Add", function() {
        return numbers.add(text() ? Number(text("")) : void 0);
      })), button.warning('Reverse sorting', function() {
        factor *= -1;
        return numbers.sort(comparator);
      }));
    }), example(".indexOf, .contains, .at", "<p><code>indexOf(item)</code> returns the index of an item in the collection or -1 if it's not present.</p>\n<p><code>contains(item)</code> returns true if an item is in the collection</p>\n<p><code>at(index)</code> returns the item at index</p>", function() {
      var numbers, result, value;
      numbers = collection([1, 2, 3, 4, 5]);
      result = model("");
      value = model("");
      return body(showCollection(numbers), p(result), form.inline(input.text(value).span1(), button('indexOf', function() {
        return result(numbers.indexOf(Number(value(""))));
      }), button('contains', function() {
        return result(numbers.contains(Number(value(""))));
      }), button('at', function() {
        return result(numbers.at(Number(value(""))));
      })));
    }));
  };

}).call(this);
