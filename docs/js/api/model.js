// Generated by CoffeeScript 1.4.0
(function() {
  var bootstrap, docs, models;

  docs = window.BC.namespace("docs");

  bootstrap = window.BC.namespace("bootstrap");

  models = window.BC.namespace("models");

  $.extend(this, bootstrap, models, docs);

  docs.modelApi = function() {
    return section(h1("Model"), docs.code.model(), p("Models constructs observables from values or objects."), example("Model", "Creates an observable value. <code>x = model(value)</code> creates a new observable.\nCalling <code>x()</code> gets the value of the observable. <code>x(newValue)</code> sets\nthe value of the observable. Observable values can be bound to properties of the dom elements\nand they will be automatically updated when the value changes.", function() {
      var count, text;
      count = model(0);
      text = model("");
      count.subscribe(function() {
        return text("Total count " + count());
      });
      return body(button.primary("+1", function() {
        return count(count() + 1);
      }), span(text));
    }), example("Object", "Using <code>object(obj)</code> makes a new object each field of\nwhich is observable. Nested objects are also converted to observable\nand nested arrays to collection, the objects it arrays are also converted to\nobservables. To get the observable for a field <code>bind(obj.field)</code> must\nbe used. Changes to a field within the object are propagated upwards,\nso if you subscribe to an object changes to all fields and subfields will\nresult calling the subscription.", function() {
      var location, obj;
      obj = object({
        name: "Kiril Minkov",
        cool: true,
        age: 25,
        locations: ["London", "Cambridge"],
        language: {
          name: "Bulgarian",
          "native": false
        }
      });
      location = model("");
      return body(form({
        "Name": input.text(bind(obj.name)),
        "Cool": input.checkbox(bind(obj.cool)),
        "Age": input.text(bind(obj.age)),
        "Locations": [
          div().foreach(obj.locations, function(location) {
            return span(type.label(location).on('click', function() {
              return obj.locations.remove(location);
            }), "&nbsp;");
          }), append(input.text(location).placeholder("Add location..."), button("Add", function() {
            return obj.locations.add(location(""));
          }))
        ],
        "Language": input.text(bind(obj.language.name)),
        "Native": input.checkbox(bind(obj.language["native"]))
      }), pre(code(map(obj, function() {
        return JSON.stringify(obj, null, 4);
      }))));
    }), example("Map", "Creates a new model that maps the value of a model. ", function() {
      var count;
      count = object({
        value: 1
      });
      return body(button("+1", function() {
        return count.value++;
      }).bindDisabled(map(bind(count.value), function() {
        return count.value > 3;
      })), span(bind(count.value)));
    }));
  };

}).call(this);
