// Generated by CoffeeScript 1.4.0
(function() {
  var bootstrap, models;

  bootstrap = window.BC.namespace("bootstrap");

  models = window.BC.namespace("models");

  $.extend(this, bootstrap, models);

  describe("Examples test", function() {
    it("", function() {});
    it("Tests todo app", function() {
      var footer, header, todo, todoList, todoText, todos;
      todo = function(text, done) {
        if (done == null) {
          done = false;
        }
        return model({
          text: ko.observable(text),
          done: ko.observable(done)
        });
      };
      todos = collection(todo('first todo'));
      todoText = model("");
      header = function() {
        return div(form.inline(input.checkbox().on('click', function() {
          var todoItem, _i, _len, _ref, _results;
          _ref = todos();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            todoItem = _ref[_i];
            _results.push(todoItem.done($(this).is(':checked')));
          }
          return _results;
        }), input.text().bindValue(todoText), button('Add', function() {
          todos.push(todo(todoText()));
          todoText("");
          return false;
        })));
      };
      todoList = function() {
        return table().foreach(todos, function(todo) {
          var todoTextView;
          todoTextView = ko.observable(span(todo.text()));
          return tr(td(input.checkbox().bindValue(todo.done)), td().bindHtml(todoTextView).on('dblclick', function() {
            return todoTextView(div(input.text().bindValue(todo.text).on('blur', function() {
              return todoTextView(div(span(todo.text())));
            }).trigger('focus')));
          }), td(button("Remove", function() {
            return todos.remove(todo);
          })));
        });
      };
      footer = function() {
        return div(left(span().bindText(todos, function() {
          return todos.length;
        }), " of ", span().bindText(todos, function() {
          return todos.length;
        })), center(a('All', function() {
          return todos.filter(function() {
            return true;
          });
        }), a('Done', function() {
          return todos.filter(function(todo) {
            return todo.done;
          });
        }), a('Left', function() {
          return todos.filter(function(todo) {
            return !todo.done;
          });
        })), right(a('Remove all', function() {
          return todos.removeAll();
        })));
      };
      return show(div(header(), todoList(), footer()));
    });
    it("Tests select with foreach", function() {
      var text, value, values;
      values = collection('One', 'Two', 'Three', 'Four');
      value = model("X");
      text = model("");
      return show(div(select.multiple().foreach(values, function(value) {
        return option(value, value);
      }).bindValue(value), span().bindText(value), input.text().bindValue(text), button('Add', function() {
        values.push(text());
        return text("");
      })));
    });
    it("Tests select", function() {
      var value;
      value = model("value2");
      return show(div(select(option('Value 1', 'value1'), option('Value 2', 'value2'), option('Value 3', 'value3')).bindValue(value), span().bindText(value)));
    });
    it("Tests radio", function() {
      var value;
      value = model('value2');
      return show(div(input.radio('name', 'value1').bindValue(value), input.radio('name', 'value2').bindValue(value), input.radio('name', 'value3').bindValue(value), span().bindText(value, function() {
        return value().toString();
      })));
    });
    it("Tests checkbox", function() {
      var value;
      value = model(true);
      return show(div(input.checkbox().bindValue(value), input.checkbox().bindValue(value), span().bindText(value, function() {
        return value().toString();
      })));
    });
    it("Tests attr, css and text bindings", function() {
      var number, selectColor;
      number = model(0);
      selectColor = function(value) {
        if (value > 6) {
          return 'red';
        } else if (value > 3) {
          return 'orange';
        } else {
          return 'green';
        }
      };
      return show(div(button("Test", function() {
        return number(number() + 1);
      }).bindDisabled(number, function() {
        return number() === 10;
      }), span().bindText(number).bindCss(number, function() {
        return {
          color: selectColor(number())
        };
      })));
    });
    it("Tests visible and html bindings", function() {
      var isThree, number;
      number = model(0);
      isThree = function() {
        return number() === 3;
      };
      return show(div(p("You've clicked ", span("").bindText(number), " times"), button("Click me", function() {
        return number(number() + 1);
      }).bindDisabled(number, isThree), p("That's too many clicks! Please stop before you wear out your fingers. ", button('Reset Clicks', function() {
        return number(0);
      })).bindVisible(number, isThree)));
    });
    it("Tests input element", function() {
      var value;
      value = model("test");
      return show(div(input.text().bindValue(value), span().bindText(value)));
    });
    it("Tests simple list", function() {
      var item, items;
      item = model("");
      items = collection();
      return show(div(form.inline(input.text().bindValue(item), button('Add', function() {
        items.push(item());
        item("");
        return false;
      })), table(thead(tr(th("Value")))).foreach(items, function(item) {
        return tr(td(item));
      })));
    });
    return it("Displays different functions", function() {
      var f, _i, _results;
      f = model(function(x) {
        return x;
      });
      return show(div(button("x", function() {
        return f(function(x) {
          return x;
        });
      }), button("x^2", function() {
        return f(function(x) {
          return (x - 50) * (x - 50) / 30;
        });
      }), button("log", function() {
        return f(function(x) {
          return Math.log(x) * 20;
        });
      }), button("sin", function() {
        return f(function(x) {
          return Math.sin((x - 50) / 10) * 50 + 50;
        });
      }), div({
        "class": 'area'
      }).foreach((function() {
        _results = [];
        for (_i = 1; _i <= 100; _i++){ _results.push(_i); }
        return _results;
      }).apply(this), function(x) {
        return div({
          "class": 'point'
        }).bindCss(f, function(fn) {
          return {
            left: x + 'px',
            bottom: fn(x) + 'px'
          };
        });
      })));
    });
  });

}).call(this);
