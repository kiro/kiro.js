// Generated by CoffeeScript 1.4.0
(function() {
  var bootstrap, docs, models;

  docs = window.BC.namespace("docs");

  bootstrap = window.BC.namespace("bootstrap");

  models = window.BC.namespace("models");

  $.extend(this, bootstrap, models, docs);

  docs.home = function() {
    return section(h1("Enter Kiro.js"), docs.code.home(), example("Declarative bindings", "Allows to bind the values of html properties to models.", function() {
      var text;
      text = model("World");
      return body(input.text(text), h3(map(text, function() {
        return "Hello " + text();
      })));
    }), example("Bootstrap controls", "Succint api around bootstrap controls allows building quick prototypes and web apps.", function() {
      var text, user;
      user = {
        firstName: model("Kiril"),
        lastName: model("Minkov")
      };
      text = model("");
      return body(h5("Buttons"), button.primary("Primary", function() {
        return text("Primary");
      }), dropdown(button.info("Info", function() {
        return text("Info, info");
      }), a("Hello", function() {
        return text("Hello");
      }), dropdown.divider(), a("Test", function() {
        return text("Test");
      })), button.group(button.warning("Warning", function() {
        return text("Warning");
      }), button.success("Success", function() {
        return text("Success");
      }), button.danger("Danger", function() {
        return text("Danger");
      })), span(map(text, function() {
        return "I am " + text();
      })), h5("Forms"), form({
        "First name": input.text(user.firstName),
        "Last name": input.text(user.lastName)
      }), h5("Table"), table().bordered().hover().foreach([1, 2], function(row) {
        return tr().foreach([1, 2, 3], function(col) {
          return td(row + ", " + col);
        });
      }), h5("And more..."));
    }), example("Html templating", "Allows building responsive html components", function() {
      var text, textEdit;
      textEdit = function(text) {
        var edit;
        edit = model(false);
        return div(span(text).bindVisible(edit, function() {
          return !edit();
        }).on('click', function() {
          return edit(true);
        }), input.text({
          autofocus: true
        }, text).bindVisible(edit).on('blur', function() {
          return edit(false);
        }).on('keydown', function(e) {
          if (e.keyCode === 13) {
            return edit(false);
          }
        }));
      };
      text = model("Click to edit");
      return body(textEdit(text));
    }), example("Todo", "", function() {
      var done, notDone, remaining, todo, todoText, todos;
      todo = function(text, done) {
        if (done == null) {
          done = false;
        }
        return object({
          text: text,
          done: done
        });
      };
      todos = collection([todo('first todo')]);
      notDone = function(todo) {
        return !todo.done;
      };
      done = function(todo) {
        return todo.done;
      };
      remaining = function() {
        return todos.count(notDone) + " of " + todos.total() + " remaining";
      };
      todoText = model("");
      return div(span(map(todos, remaining)), button.link("archive", function() {
        return todos.remove(done);
      }), div().foreach(todos, function(todo) {
        return form.inline(input.checkbox(todo.done), span(todo.text));
      }), form.inline(input.text(todoText), button.primary('Add', function() {
        return todos.add(todo(todoText("")));
      })));
    }));
  };

}).call(this);
