// Generated by CoffeeScript 1.4.0
(function() {
  var bootstrap, docs, models, store;

  docs = window.BC.namespace("docs");

  docs.examples = window.BC.namespace("docs.examples");

  bootstrap = window.BC.namespace("bootstrap");

  models = window.BC.namespace("models");

  store = window.BC.namespace("store");

  $.extend(this, bootstrap, models, docs, store);

  docs.examples.game = function() {
    return section(h1("Game"), docs.code.game(), example("Multiplayer tic tac toe", "Open if different tabs to play the game.", function() {
      var checkFinished, content, currentPlayer, enterPlayerName, game, gameList, games, getId, icon, myturn, otherPlayer, player, showGame, state;
      state = {
        EMPTY: "empty",
        TIC: "tic",
        TAC: "tac"
      };
      getId = function(item) {
        return item.id;
      };
      currentPlayer = null;
      player = function(name) {
        var obj;
        obj = object({
          id: guid(),
          name: name,
          lastSeen: Date.now()
        });
        return obj;
      };
      game = function(player) {
        var i, j, obj;
        obj = object({
          id: guid(),
          players: [player],
          turn: 0,
          state: (function() {
            var _i, _results;
            _results = [];
            for (i = _i = 0; _i < 3; i = ++_i) {
              _results.push((function() {
                var _j, _results1;
                _results1 = [];
                for (j = _j = 0; _j < 3; j = ++_j) {
                  _results1.push({
                    value: state.EMPTY
                  });
                }
                return _results1;
              })());
            }
            return _results;
          })(),
          lastSeen: Date.now(),
          finished: false
        });
        setInterval((function() {
          return obj.lastSeen = Date.now();
        }), 1000);
        return obj;
      };
      games = collection();
      pusher(games, 'games', getId);
      content = model();
      checkFinished = function(game) {
        var check, i, _i;
        check = function(x, y, dx, dy) {
          var currentState, k, _i, _j, _results;
          currentState = game.state.at(y).at(x);
          for (k = _i = 0; _i < 3; k = ++_i) {
            if (game.state.at(y + dy * k).at(x + dx * k) !== currentState) {
              currentState = void 0;
            }
          }
          if (currentState !== state.NONE && !game.finished) {
            game.finished = true;
            _results = [];
            for (k = _j = 0; _j < 3; k = ++_j) {
              _results.push(game.state.at(y + dy * k).at(x + dx * k).value += " mark");
            }
            return _results;
          }
        };
        for (i = _i = 0; _i < 3; i = ++_i) {
          check(i, 0, 0, 1);
          check(0, i, 1, 0);
        }
        check(0, 0, 1, 1);
        return check(2, 0, -1, 1);
      };
      icon = function(state) {
        if (state === state.TIC) {
          return '<i class="icon-circle-blank"/>';
        } else if (state === state.TAC) {
          return '<i class="icon-remove"/>';
        } else {
          return "";
        }
      };
      myturn = function(game) {
        return game.players.at(game.turn).id === currentPlayer.id;
      };
      otherPlayer = function(game) {
        return game.players.at((game.turn + 1) % 2);
      };
      showGame = function(game) {
        return div(h3(map(game.players, function() {
          if (game.players.count() === 1) {
            return "Waiting for other player to join...";
          } else {
            return game.players.at(0).name + " vs " + game.players.at(1).name;
          }
        })), h4(map(game, function() {
          if (game.players.count() === 2) {
            if (myturn(game)) {
              return "Your turn";
            } else {
              return otherPlayer(game).name + "s turn.";
            }
          }
        })), div({
          "class": 'board'
        }).foreach(game.state, function(row) {
          return div({
            "class": 'board-row'
          }).foreach(row, function(field) {
            return div({
              "class": 'icon4 field'
            }, map(bind(field.value), function() {
              return icon(field.value);
            })).on('click', function() {
              if (myturn(game) && field.value === state.EMPTY && !game.finished) {
                field.value = game.turn === 0 ? state.TIC : state.TAC;
                game.turn = (game.turn + 1) % 2;
                return checkFinished(game);
              }
            });
          });
        }));
      };
      gameList = function() {
        return div(h2("Create new game"), button('Create', function() {
          var newGame;
          newGame = game(currentPlayer);
          games.add(newGame);
          return content(showGame(newGame));
        }), h2("Or join an existing game"), p(span(map(games, function() {
          return games.count();
        })), " currently available"), table(thead(tr(th("Players").span3(), th("Action")))).foreach(games, function(game) {
          return tr(td(ul.inline().foreach(game.players, function(player) {
            return li(player.name);
          })).span3(), td(button.primary("Join", function() {
            game.players.add(currentPlayer);
            return content(showGame(game));
          }).bindVisible(game, function() {
            return game.players.count() === 1;
          }), button.info("Watch", function() {
            return content(showGame(game));
          }).bindVisible(game, function() {
            return game.players.count() === 2;
          })));
        }));
      };
      enterPlayerName = function() {
        var playerName;
        playerName = model("");
        return div(h3("Enter player name"), form.inline(input.text(playerName), button.primary("Enter", function() {
          currentPlayer = player(playerName());
          return content(gameList());
        })));
      };
      content(enterPlayerName());
      return body(div(content));
    }));
  };

}).call(this);
