// Generated by CoffeeScript 1.4.0
(function() {
  var bootstrap, docs, models, store;

  docs = window.BC.namespace("docs");

  docs.examples = window.BC.namespace("docs.examples");

  bootstrap = window.BC.namespace("bootstrap");

  models = window.BC.namespace("models");

  store = window.BC.namespace("store");

  $.extend(this, bootstrap, models, docs, store);

  docs.examples.game = function() {
    return section(h1("Game"), docs.code.game(), example("Multiplayer tic tac toe", "Open if different tabs to play the game.", function() {
      var canPlay, checkFinished, content, currentPlayer, game, games, getId, icon, initialState, myturn, otherPlayer, player, players, showGame, state;
      state = {
        EMPTY: "empty",
        TIC: "tic",
        TAC: "tac"
      };
      getId = function(item) {
        return item.id;
      };
      currentPlayer = null;
      player = function(name) {
        return object({
          id: guid(),
          name: name,
          lastSeen: Date.now()
        });
      };
      currentPlayer = player('Player' + Math.floor(Math.random() * 1000));
      players = collection([currentPlayer]).filter();
      pusher(players, 'players', getId);
      if (docs.examples.lastUserUpdate) {
        window.clearInterval(docs.examples.lastUserUpdate);
      }
      docs.examples.lastUserUpdate = window.setInterval(function() {
        return currentPlayer.lastSeen = Date.now();
      }, 5 * 1000);
      initialState = function() {
        var i, j, _i, _results;
        _results = [];
        for (i = _i = 0; _i < 3; i = ++_i) {
          _results.push((function() {
            var _j, _results1;
            _results1 = [];
            for (j = _j = 0; _j < 3; j = ++_j) {
              _results1.push({
                value: state.EMPTY,
                mark: false
              });
            }
            return _results1;
          })());
        }
        return _results;
      };
      game = function() {
        var obj;
        obj = object({
          id: 1,
          turn: 0,
          state: initialState(),
          lastSeen: Date.now(),
          finished: false
        });
        return obj;
      };
      game = game();
      games = collection([game]);
      pusher(games, 'games', getId);
      content = model();
      checkFinished = function(game) {
        var check, i, _i;
        check = function(x, y, dx, dy) {
          var currentState, k, _i, _j, _results;
          currentState = game.state.at(y).at(x).value;
          for (k = _i = 0; _i < 3; k = ++_i) {
            if (game.state.at(y + dy * k).at(x + dx * k).value !== currentState) {
              currentState = void 0;
            }
          }
          if (currentState && currentState !== state.EMPTY && !game.finished) {
            game.finished = true;
            _results = [];
            for (k = _j = 0; _j < 3; k = ++_j) {
              _results.push(game.state.at(y + dy * k).at(x + dx * k).mark = true);
            }
            return _results;
          }
        };
        for (i = _i = 0; _i < 3; i = ++_i) {
          check(i, 0, 0, 1);
          check(0, i, 1, 0);
        }
        check(0, 0, 1, 1);
        return check(2, 0, -1, 1);
      };
      icon = function(value) {
        if (value === state.TIC) {
          return '<i class="icon-circle-blank"/>';
        } else if (value === state.TAC) {
          return '<i class="icon-remove"/>';
        } else {
          return "";
        }
      };
      myturn = function(game) {
        return game.players.count() > game.turn && game.players.at(game.turn).id === currentPlayer.id;
      };
      otherPlayer = function(game) {
        return game.players.at((game.turn + 1) % 2);
      };
      canPlay = function() {
        return game.players.count() > 1 && (game.players.at(0).id === currentPlayer.id || game.players.at(1).id === currentPlayer.id);
      };
      showGame = function(game) {
        return div(h3(map(game, function() {
          if (game.players.count() <= 1) {
            return "Waiting for other player to join...";
          } else if (canPlay()) {
            return game.players.at(0).name + " vs " + game.players.at(1).name;
          } else {
            return "Game is full, you can just observe.";
          }
        })), h4(map(game, function() {
          if (game.players.count() >= 2) {
            if (myturn(game)) {
              return "Your turn";
            } else {
              return otherPlayer(game).name + "s turn.";
            }
          }
        })).bindVisible(game.players, function() {
          return canPlay();
        }), div({
          "class": 'board'
        }).foreach(game.state, function(row) {
          return div({
            "class": 'board-row'
          }).foreach(row, function(field) {
            return div({
              "class": 'icon4 field'
            }, map(bind(field.value), function() {
              return icon(field.value);
            })).on('click', function() {
              if (myturn(game) && field.value === state.EMPTY && !game.finished) {
                field.value = game.turn === 0 ? state.TIC : state.TAC;
                checkFinished(game);
                return game.turn = (game.turn + 1) % 2;
              }
            }).bindClass(bind(field.mark), function() {
              if (field.mark) {
                return "mark";
              }
            });
          });
        }), div(h3(game.players.count() > 1 ? map(bind(game.finished), function() {
          return game.players.at(game.turn).name + " won!!!";
        }) : void 0), button.primary('Play again!', function() {
          game.state = initialState();
          return game.finished = false;
        }), button('Go back', function() {
          return content(gameList());
        })).bindVisible(bind(game.finished)));
      };
      content(showGame(game));
      return body(div(content));
    }));
  };

}).call(this);
