// Generated by CoffeeScript 1.4.0
(function() {
  var button, common, controls, dropdown, mixins,
    __slice = [].slice;

  controls = window.BC.namespace("controls");

  mixins = window.BC.namespace("mixins");

  common = window.BC.namespace("common");

  $.extend(this, common);

  button = function(init) {
    return function() {
      var args, click, last;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      last = _.last(args);
      click = function() {};
      if (_.isFunction(last)) {
        click = last;
        args = args.slice(0, args.length - 1);
      }
      return $.extend(tag('button')(init, args).on('click', click), mixins.sizeable('btn'), {
        block: function() {
          return this.addClass("btn-block");
        }
      });
    };
  };

  controls.button = button({
    "class": 'btn'
  });

  controls.button.primary = button({
    "class": 'btn btn-primary'
  });

  controls.button.inverse = button({
    "class": 'btn btn-inverse'
  });

  controls.button.link = button({
    "class": 'btn btn-link'
  });

  controls.button.block = button({
    "class": 'btn btn-block'
  });

  controls.button.info = button({
    "class": 'btn btn-info'
  });

  controls.button.warning = button({
    "class": 'btn btn-warning'
  });

  controls.button.success = button({
    "class": 'btn btn-success'
  });

  controls.button.danger = button({
    "class": 'btn btn-danger'
  });

  controls.button.submit = button({
    "class": 'btn'
  });

  controls.a = function() {
    var args, click, last;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    last = _.last(args);
    click = function() {};
    if (_.isFunction(last)) {
      click = last;
      args = args.slice(0, args.length - 1);
    }
    return tag('a')(args).on('click', click);
  };

  controls.divider = function() {
    return {
      isDivider: true
    };
  };

  dropdown = function() {
    var button, item, items, toLi;
    button = arguments[0], items = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    button.addItems(span({
      "class": 'caret'
    })).addClass('dropdown-toggle').attr({
      'data-toggle': "dropdown"
    });
    toLi = function(item) {
      if (item.isDivider) {
        return controls.li({
          "class": 'divider'
        });
      } else {
        return controls.li(item);
      }
    };
    return [
      button, controls.ul({
        "class": "dropdown-menu"
      }, (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          item = items[_i];
          _results.push(toLi(item));
        }
        return _results;
      })())
    ];
  };

  controls.dropdown = function() {
    var button, items;
    button = arguments[0], items = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return div({
      "class": "btn-group"
    }, dropdown.apply(null, [button].concat(__slice.call(items))));
  };

  controls.dropdown.segmented = function() {
    var btn, items, toggle;
    btn = arguments[0], items = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    toggle = controls.button().addClass(btn.classes());
    return div({
      "class": "btn-group"
    }, btn, dropdown.apply(null, [toggle].concat(__slice.call(items))));
  };

}).call(this);
