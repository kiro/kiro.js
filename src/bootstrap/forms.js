// Generated by CoffeeScript 1.4.0
(function() {
  var common, controls, form, mixins, toAddOn,
    __slice = [].slice;

  controls = window.BC.namespace("controls");

  mixins = window.BC.namespace("mixins");

  common = window.BC.namespace("common");

  $.extend(this, common);

  controls.input = {
    text: function(config, type) {
      if (type == null) {
        type = 'text';
      }
      return $.extend(tag('input')(config).attr({
        type: type
      }).observable().on('keyup', function(e) {
        return e.data.publish($(this).val());
      }), {
        placeholder: function(value) {
          return this.attr({
            'placeholder': value
          });
        }
      }, mixins.sizeable("input"), mixins.spannable());
    },
    password: function(config) {
      return this.text(config, 'password');
    },
    checkbox: function() {
      return $.extend(tag('input')().attr({
        type: 'checkbox'
      }).observable().on('click', function(e) {
        return e.data.publish($(this).is(':checked'));
      }), {
        bindValue: function(observable) {
          this.bindProp(observable, function() {
            return {
              checked: observable()
            };
          });
          return this.subscribe(function(value) {
            return observable(value);
          });
        },
        isCheckbox: true
      });
    },
    radio: function(name, value) {
      return $.extend(tag('input')().attr({
        type: 'radio',
        name: name,
        value: value
      }).observable().on('click', function(e) {
        return e.data.publish(value);
      }), {
        bindValue: function(observable) {
          this.bindProp(observable, function() {
            return {
              checked: observable() === value
            };
          });
          return this.subscribe(function(value) {
            return observable(value);
          });
        },
        isRadio: true
      });
    },
    submit: function(name, click) {
      return tag('input')(name).attr({
        type: 'submit'
      }).on('click', click);
    }
  };

  controls.select = function() {
    var items;
    items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return $.extend(tag('select').apply(null, items).observable().on('change', function(e) {
      return e.data.publish($(this).val());
    }), mixins.spannable());
  };

  controls.select.multiple = function() {
    var items;
    items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return controls.select.apply(controls, items).attr({
      multiple: 'multiple'
    });
  };

  controls.option = function(text, value) {
    return tag('option')(text).attr({
      value: value
    });
  };

  controls.textarea = function(rows) {
    var result;
    result = tag('textarea')();
    if (rows) {
      result.attr({
        rows: rows
      });
    }
    return result.observable().on('keyup', function(e) {
      return e.data.publish($(this).val());
    });
  };

  form = tag('form');

  controls.form = function() {
    var actions, content, items, key, value;
    items = arguments[0], actions = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    content = [];
    for (key in items) {
      value = items[key];
      if (key === 'legend') {
        content.push(legend(value));
      } else if (value.isCheckbox) {
        content.push(label({
          "class": 'checkbox'
        }, value, key));
      } else if (key === "") {
        content.push(value);
      } else {
        content.push(label(key));
        content.push(value);
      }
    }
    return form(fieldset(content, div({
      "class": "form-actions"
    }, actions)));
  };

  controls.form.search = function() {
    var items;
    items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return form({
      "class": "form-search"
    }, items);
  };

  controls.form.inline = function() {
    var items;
    items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return form({
      "class": "form-inline"
    }, items);
  };

  controls.form.horizontal = function() {
    var actions, content, control, group, items, key, value;
    items = arguments[0], actions = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    group = function() {
      var items;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return div({
        "class": 'control-group'
      }, items);
    };
    control = function() {
      var items;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return div({
        "class": 'controls'
      }, items);
    };
    content = [];
    for (key in items) {
      value = items[key];
      if (key === 'legend') {
        content.push(legend(value));
      } else if (value.isCheckbox) {
        content.push(group(control(label({
          "class": 'checkbox'
        }, value, key))));
      } else if (key === "") {
        content.push(group(control(value)));
      } else {
        content.push(group(label({
          "class": "control-label"
        }, key), control(value)));
      }
    }
    return form({
      "class": 'form-horizontal'
    }, content, div({
      "class": "form-actions"
    }, actions));
  };

  controls.help = {
    block: function(text) {
      return controls.span({
        "class": 'help-block'
      }, text);
    },
    inline: function(text) {
      return controls.span({
        "class": 'help-inline'
      }, text);
    }
  };

  controls.legend = tag('legend');

  controls.fieldset = tag('fieldset');

  controls.label = tag('label');

  controls.label.inline = tag('label', 'inline');

  toAddOn = function(item) {
    if (_.isString(item)) {
      return controls.span({
        "class": 'add-on'
      }, item);
    } else {
      return item;
    }
  };

  controls.append = function() {
    var input, item, items;
    input = arguments[0], items = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    items = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        _results.push(toAddOn(item));
      }
      return _results;
    })();
    return div({
      "class": "input-append"
    }, input, items);
  };

  controls.prepend = function() {
    var item, items;
    items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    items = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        _results.push(toAddOn(item));
      }
      return _results;
    })();
    return div({
      "class": "input-prepend"
    }, items);
  };

  /*
  button
  checkbox
  color
  date
  datetime
  datetime-local
  email
  file
  hidden
  image
  month
  number
  password
  radio
  range
  reset
  search
  submit
  tel
  text
  time
  url
  week
  */


}).call(this);
