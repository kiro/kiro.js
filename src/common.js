// Generated by CoffeeScript 1.4.0
(function() {
  var common,
    __slice = [].slice;

  common = window.BC.namespace("common");

  common.toHtml = function(item) {
    var subitem;
    if (_.isFunction(item.html)) {
      return item.html();
    } else if (_.isString(item)) {
      return item;
    } else if (_.isNumber(item)) {
      return item;
    } else if (_.isUndefined(item)) {
      return "";
    } else if (_.isArray(item)) {
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = item.length; _i < _len; _i++) {
          subitem = item[_i];
          _results.push(common.toHtml(subitem));
        }
        return _results;
      })()).join(" ");
    } else {
      throw Error(item + " is expected to be String, Number, Array, undefined or have .html() function");
    }
  };

  common.init = function(item, context) {
    var subitem;
    if (_.isFunction(item.init)) {
      return item.init(context);
    } else if (_.isString(item)) {

    } else if (_.isNumber(item)) {

    } else if (_.isUndefined(item)) {

    } else if (_.isArray(item)) {
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = item.length; _i < _len; _i++) {
          subitem = item[_i];
          _results.push(common.init(subitem, context));
        }
        return _results;
      })()).join(" ");
    } else {
      throw Error(item + " is expected to be String, Number, Array, undefined or have .init() function");
    }
  };

  common.tag = function(name) {
    return function() {
      var bind, classes, element, id, initialized, initializers, items, nextId,
        _this = this;
      classes = arguments[0], items = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      bind = function(setter, observable, map) {
        if (map == null) {
          map = function(x) {
            return x;
          };
        }
        setter(map(observable(), observable));
        observable.subscribe(function(newValue) {
          return setter(map(newValue, observable));
        });
        return this;
      };
      nextId = (function() {
        var id;
        id = 0;
        return function() {
          return ++id;
        };
      })();
      initialized = false;
      id = 0;
      element = null;
      initializers = [];
      return {
        id: id,
        el: function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (initialized) {
            if (args.length === 0) {
              return element;
            } else {
              return element[args[0]](_.rest(args));
            }
          } else {
            if (!id) {
              id = nextId();
            }
            initializers.push(args);
            return this;
          }
        },
        html: function() {
          return _.template("<" + name + " <% if (classes) { %><%='class=\"' + classes + '\"' %> <% } %> <% if (id) { %><%='id=\"' + id + '\"'%><% } %>><% _.each(items, function(item) { %>\n  <%=toHtml(item)%>\n<% }) %></" + name + ">", {
            items: items,
            toHtml: common.toHtml,
            classes: classes,
            id: id
          });
        },
        init: function(context) {
          var initializer, method, params, _i, _len;
          common.init(items, context);
          if (initializers) {
            element = context.find('#' + id).first();
            for (_i = 0, _len = initializers.length; _i < _len; _i++) {
              initializer = initializers[_i];
              method = initializer[0];
              params = _.rest(initializer);
              console.log(element);
              console.log(method);
              console.log(params);
              console.log(element[method].apply(element, params));
            }
          }
          return initialized = true;
        },
        bind: common.curry(bind, function(value) {
          return _this.el('val', value);
        }),
        bindText: common.curry(bind, function(value) {
          return _this.el('text', value);
        }),
        bindVisible: common.curry(bind, function(value) {
          if (value) {
            return _this.el('show');
          } else {
            return _this.el('hide');
          }
        }),
        bindHtml: common.curry(bind, function(value) {
          return _this.el('html', value);
        }),
        bindCss: common.curry(bind, function(value) {
          return _this.el('css', value);
        }),
        bindStyle: common.curry(bind, function(value) {
          return _this.el('style', value);
        }),
        bindAttr: common.curry(bind, function(value) {
          return _this.el('attr', value);
        }),
        on: function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return this.el.apply(this, ['on'].concat(__slice.call(args)));
        }
      };
    };
  };

  common.element = function(composite) {
    var el;
    el = $(composite.html());
    composite.init(el);
    return el;
  };

  common.curry = function() {
    var fixedArgs, fn;
    fn = arguments[0], fixedArgs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return fn.apply(null, fixedArgs.concat(args));
    };
  };

  common.list = function(collection, render) {};

}).call(this);
