// Generated by CoffeeScript 1.4.0
(function() {
  var common, nextId,
    __slice = [].slice;

  common = window.BC.namespace("common");

  common.toHtml = function(item) {
    var subitem;
    if (_.isUndefined(item)) {
      return "";
    } else if (_.isFunction(item.html)) {
      return item.html();
    } else if (_.isString(item)) {
      return item;
    } else if (_.isNumber(item)) {
      return item;
    } else if (_.isArray(item)) {
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = item.length; _i < _len; _i++) {
          subitem = item[_i];
          _results.push(common.toHtml(subitem));
        }
        return _results;
      })()).join(" ");
    } else {
      throw Error(item + " is expected to be String, Number, Array, undefined or have .html() function");
    }
  };

  common.init = function(item, context) {
    var subitem;
    if (_.isUndefined(item)) {

    } else if (_.isFunction(item.init)) {
      return item.init(context);
    } else if (_.isString(item)) {

    } else if (_.isNumber(item)) {

    } else if (_.isArray(item)) {
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = item.length; _i < _len; _i++) {
          subitem = item[_i];
          _results.push(common.init(subitem, context));
        }
        return _results;
      })()).join(" ");
    } else {
      throw Error(item + " is expected to be String, Number, Array, undefined or have .init() function");
    }
  };

  nextId = (function() {
    var id;
    id = 0;
    return function() {
      return ++id;
    };
  })();

  common.tag = function(name, initialClasses) {
    if (initialClasses == null) {
      initialClasses = "";
    }
    return function() {
      var addClass, addInitializer, attr, binder, classes, el, id, initializers, items, render, renderAttr;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      classes = [initialClasses];
      id = 0;
      el = null;
      initializers = [];
      attr = {};
      addInitializer = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (!id) {
          id = nextId();
        }
        initializers.push(args);
        return this;
      };
      binder = function(f, defaultMap) {
        if (defaultMap == null) {
          defaultMap = function(x) {
            return x;
          };
        }
        return function(observable, map) {
          if (map == null) {
            map = defaultMap;
          }
          addInitializer(f, map(observable()));
          observable.subscribe(function(newValue) {
            return el[f](map(newValue));
          });
          return this;
        };
      };
      addClass = function(name) {
        if (name) {
          return classes.push(name);
        }
      };
      renderAttr = function(attr) {
        var key, result, value;
        result = [];
        for (key in attr) {
          value = attr[key];
          if (_.isBoolean(value)) {
            if (value) {
              result.push(key);
            }
          } else {
            result.push(render(key, value));
          }
        }
        return result.join(" ");
      };
      render = function(name, value) {
        if (value) {
          return "" + name + "=\"" + value + "\"";
        } else {
          return "";
        }
      };
      if (items.length > 0 && _.isObject(items[0]) && _.keys(items[0]).length === 1 && items[0]["class"]) {
        addClass(items[0]["class"]);
        items = _.rest(items);
      }
      return {
        id: function(value) {
          if (!id) {
            id = value;
          }
          return this;
        },
        html: function() {
          return _.template("<" + name + " <%= classes %> <%= id %> <%= attr %>><% _.each(items, function(item) { %>\n  <%=toHtml(item)%>\n<% }) %></" + name + ">", {
            items: items,
            toHtml: common.toHtml,
            classes: render('class', classes.join(" ")),
            id: render('id', id),
            attr: renderAttr(attr)
          });
        },
        init: function(context) {
          var initializer, method, params, _i, _len, _results;
          common.init(items, context);
          if (id) {
            el = context.find('#' + id).first();
          }
          _results = [];
          for (_i = 0, _len = initializers.length; _i < _len; _i++) {
            initializer = initializers[_i];
            method = initializer[0];
            params = _.rest(initializer);
            _results.push(el[method].apply(el, params));
          }
          return _results;
        },
        addClass: function(name) {
          addClass(name);
          return this;
        },
        addItems: function() {
          var newItems;
          newItems = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          items = items.concat(newItems);
          return this;
        },
        bindValue: function(observable) {
          if (this.subscribe) {
            this.subscribe(function(newValue) {
              return observable(newValue);
            });
          }
          binder('val')(observable);
          return this;
        },
        bindText: binder('text'),
        bindHtml: binder('html', function(x) {
          return element(x);
        }),
        bindCss: binder('css'),
        bindStyle: binder('style'),
        bindClass: binder('class'),
        bindVisible: function(observable, condition) {
          return this.bindCss(observable, function(value) {
            return {
              display: condition(value) ? "" : "none"
            };
          });
        },
        bindDisabled: function(observable, condition) {
          return this.bindProp(observable, function(value) {
            return {
              disabled: condition(value)
            };
          });
        },
        bindAttr: binder('attr'),
        bindProp: binder('prop'),
        on: function(events, selector, handler) {
          if (!handler) {
            handler = selector;
            selector = "";
          }
          addInitializer('on', events, selector, this, handler);
          return this;
        },
        trigger: function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          addInitializer.apply(null, ['trigger'].concat(__slice.call(args)));
          return this;
        },
        foreach: function(collection, render) {
          var collectionItems, initialItems, item, _i, _len,
            _this = this;
          this.id(nextId());
          initialItems = items.slice(0);
          collectionItems = _.isFunction(collection) ? collection() : collection;
          for (_i = 0, _len = collectionItems.length; _i < _len; _i++) {
            item = collectionItems[_i];
            items.push(render(item));
          }
          if (_.isFunction(collection)) {
            collection.subscribe(function(newItems) {
              var elements;
              elements = (function() {
                var _j, _len1, _results;
                _results = [];
                for (_j = 0, _len1 = initialItems.length; _j < _len1; _j++) {
                  item = initialItems[_j];
                  _results.push(common.element(item));
                }
                return _results;
              })();
              elements = elements.concat((function() {
                var _j, _len1, _results;
                _results = [];
                for (_j = 0, _len1 = newItems.length; _j < _len1; _j++) {
                  item = newItems[_j];
                  _results.push(common.element(render(item)));
                }
                return _results;
              })());
              return el.html(elements);
            });
          }
          return this;
        },
        addClassAndItems: function() {
          var items, name;
          name = arguments[0], items = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
          this.addClass(name);
          return this.addItems.apply(this, items);
        },
        attr: function(value) {
          $.extend(attr, value);
          return this;
        },
        observable: function() {
          $.extend(this, common.observable());
          return this;
        },
        classes: function() {
          return classes.join(" ");
        }
      };
    };
  };

  common.observable = function() {
    var listeners;
    listeners = [];
    return {
      subscribe: function(listener) {
        listeners.push(listener);
        return this;
      },
      publish: function(newValue) {
        var listener, _i, _len;
        for (_i = 0, _len = listeners.length; _i < _len; _i++) {
          listener = listeners[_i];
          listener(newValue);
        }
        return this;
      }
    };
  };

  common.element = function(composite) {
    var el;
    el = $(composite.html());
    composite.init(el);
    return el;
  };

  common.partial = function() {
    var fixedArgs, fn;
    fn = arguments[0], fixedArgs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return fn.apply(null, fixedArgs.concat(args));
    };
  };

}).call(this);
