// Generated by CoffeeScript 1.6.3
(function() {
  window.BC.define('rates', function(rates) {
    rates.NO_LIMIT = -1;
    rates.idempotent = function(id) {
      var isSet, value;
      if (id == null) {
        id = (function() {
          return 1;
        });
      }
      value = {};
      isSet = false;
      return {
        set: function(newValue) {
          isSet = true;
          return value[id(newValue)] = newValue;
        },
        get: function() {
          var result;
          isSet = false;
          result = _.values(value);
          value = {};
          return result;
        },
        isSet: function() {
          return isSet;
        }
      };
    };
    rates.aggregate = function() {
      var isSet, value;
      value = [];
      isSet = false;
      return {
        set: function(newValue) {
          isSet = true;
          if (!_.isArray(newValue)) {
            newValue = [newValue];
          }
          return value = value.concat(newValue);
        },
        get: function() {
          var result;
          isSet = false;
          result = value;
          value = [];
          return result;
        },
        isSet: function() {
          return isSet;
        }
      };
    };
    return rates.rate = function(action, request_rate, aggregator) {
      var hasTimeout;
      hasTimeout = false;
      return function(item) {
        var handler;
        aggregator.set(item);
        if (request_rate === rates.NO_LIMIT) {
          return action(aggregator.get());
        } else if (!hasTimeout) {
          action(aggregator.get());
          hasTimeout = true;
          handler = function() {
            if (aggregator.isSet()) {
              action(aggregator.get());
            }
            return hasTimeout = false;
          };
          return window.setTimeout(handler, 1000 / request_rate);
        }
      };
    };
  });

}).call(this);
