// Generated by CoffeeScript 1.4.0
(function() {
  var common,
    __slice = [].slice;

  common = window.BC.namespace("common");

  common.toHtml = function(item) {
    var subitem;
    if (_.isUndefined(item)) {
      return "";
    } else if (_.isFunction(item.html)) {
      return item.html();
    } else if (_.isString(item)) {
      return item;
    } else if (_.isNumber(item)) {
      return item;
    } else if (_.isArray(item)) {
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = item.length; _i < _len; _i++) {
          subitem = item[_i];
          _results.push(common.toHtml(subitem));
        }
        return _results;
      })()).join(" ");
    } else {
      throw Error(item + " is expected to be String, Number, Array, undefined or have .html() function");
    }
  };

  common.init = function(item, context) {
    var subitem;
    if (_.isUndefined(item)) {

    } else if (_.isFunction(item.init)) {
      return item.init(context);
    } else if (_.isString(item)) {

    } else if (_.isNumber(item)) {

    } else if (_.isArray(item)) {
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = item.length; _i < _len; _i++) {
          subitem = item[_i];
          _results.push(common.init(subitem, context));
        }
        return _results;
      })()).join(" ");
    } else {
      throw Error(item + " is expected to be String, Number, Array, undefined or have .init() function");
    }
  };

  common.nextId = (function() {
    var id;
    id = 0;
    return function() {
      return ++id;
    };
  })();

  /*
  common.tag = (name, initialClasses = "") ->
    (items...) ->
      classes = [initialClasses]
      id = 0
      el = null
      initializers = []
      attr = {}
  
      # Adds a initializer, which is a jquery call.
      addInitializer = (args...) ->
        if !id then id = nextId()
        initializers.push(args)
        this
  
      binder = (f, defaultMap = (x) -> x) ->
        (observable, map = defaultMap) ->
          addInitializer(f, map(observable()))
          observable.subscribe( (newValue) -> el[f](map(newValue)) )
          this
  
      addClass = (name) -> if name then classes.push(name)
  
      renderAttr = (attr) ->
        result = []
        for key, value of attr
          if _.isBoolean(value)
            result.push(key) if value
          else
            result.push(render(key, value))
        result.join(" ")
  
      render = (name, value) -> if value then "#{name}=\"#{value}\"" else ""
  
      if items.length > 0 and _.isObject(items[0]) and _.keys(items[0]).length <= 3
        if items[0].class or items[0].src
          addClass(items[0].class) if items[0].class
          $.extend(attr, src: items[0].src) if items[0].src
          $.extend(attr, type: items[0].type) if items[0].type
          items = _.rest(items)
  
      id: (value) ->
        id = value if !id
        this
  
      html: () ->
        _.template("""
          <#{name} <%= classes %> <%= id %> <%= attr %>><% _.each(items, function(item) { %>
            <%=toHtml(item)%>
          <% }) %></#{name}>
        """, {items: items, toHtml: common.toHtml, classes: render('class', classes.join(" ")), id: render('id', id), attr: renderAttr(attr)})
      init: (context) ->
        common.init(items, context)
        el = context.find('#' + id).first() if id
  
        for initializer in initializers
          method = initializer[0]
          params = _.rest(initializer)
          el[method](params...)
  
      addClass: (name) ->
        addClass(name)
        this
      addItems: (newItems...) ->
        items = items.concat(newItems)
        this
  
      bindValue: (observable) ->
        if this.subscribe
          this.subscribe((newValue) -> observable(newValue))
        binder('val')(observable)
        this
  
      bindText: binder('text')
      bindHtml: binder('html', (x) -> element(x))
      bindCss: binder('css')
      bindStyle: binder('style')
      bindClass: binder('class')
      bindVisible: (observable, condition) ->
        this.bindCss(observable, (value) ->
           display: if condition(value) then "" else "none"
        )
      bindDisabled: (observable, condition = (x) -> x) ->
        this.bindProp(observable, (value) -> disabled: condition(value))
      bindAttr: binder('attr')
      bindProp: binder('prop')
  
      on: (events, selector, handler) ->
        if !handler
          handler = selector
          selector = ""
  
        addInitializer('on', events, selector, this, handler)
        this
  
      trigger: (args...) ->
        addInitializer('trigger', args...)
        this
  
      foreach: (collection, render) ->
        this.id(nextId())
        initialItems = items.slice(0)
  
        collectionItems = if _.isFunction(collection) then collection() else collection
  
        items.push(render(item)) for item in collectionItems
  
        if _.isFunction(collection)
          collection.subscribe( (newItems) =>
            elements = (common.element(item) for item in initialItems)
            elements = elements.concat (common.element(render(item)) for item in newItems)
            el.html(elements)
          )
        this
  
      addClassAndItems: (name, items...) ->
        this.addClass(name)
        this.addItems(items...)
  
      addAttr: (value) ->
        $.extend(attr, value)
        this
  
      observable: () ->
        $.extend(this, common.observable())
        this
  
      classes: () -> classes.join(" ")
  */


  common.observable = function() {
    var listeners;
    listeners = [];
    return {
      subscribe: function(listener) {
        listeners.push(listener);
        return this;
      },
      publish: function(newValue) {
        var listener, _i, _len;
        for (_i = 0, _len = listeners.length; _i < _len; _i++) {
          listener = listeners[_i];
          listener(newValue);
        }
        return this;
      }
    };
  };

  common.element = function(composite) {
    var el;
    console.log(composite);
    if (_.isString(composite)) {
      return composite;
    } else if (_.isNumber(composite)) {
      return composite;
    } else if (_.isFunction(composite.html)) {
      el = $(composite.html());
      composite.init(el);
      return el;
    } else {
      throw Error(composite + " is expected to be string, number of composite");
    }
  };

  common.partial = function() {
    var fixedArgs, fn;
    fn = arguments[0], fixedArgs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return fn.apply(null, fixedArgs.concat(args));
    };
  };

}).call(this);
