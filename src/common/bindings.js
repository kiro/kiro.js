// Generated by CoffeeScript 1.4.0
(function() {

  window.BC.define('common', function(common) {
    return common.bindings = function(initialItems) {
      var addInitializer, binder, el, identity, initializers;
      el = null;
      initializers = [];
      identity = function(x) {
        return x;
      };
      addInitializer = function(initializer) {
        if (!this.id()) {
          this.addAttr({
            id: common.nextId()
          });
        }
        initializers.push(initializer);
        return this;
      };
      binder = function(f, defaultMap) {
        if (defaultMap == null) {
          defaultMap = identity;
        }
        return function(observable, map) {
          if (map == null) {
            map = defaultMap;
          }
          addInitializer.call(this, function() {
            return el[f](map(observable.get()));
          });
          addInitializer.call(this, function() {
            return observable.subscribe(function(newValue) {
              return el[f](map(newValue));
            });
          });
          return this;
        };
      };
      return {
        initBindings: function(element) {
          var initializer, _i, _len, _results;
          el = element;
          _results = [];
          for (_i = 0, _len = initializers.length; _i < _len; _i++) {
            initializer = initializers[_i];
            _results.push(initializer());
          }
          return _results;
        },
        setValue: function() {},
        bindValue: function(observable) {
          var valueHandler;
          valueHandler = function(newValue) {
            return el.val(newValue);
          };
          this.setValue = function(newValue) {
            observable.unsubscribe(valueHandler);
            observable.set(newValue);
            return observable.subscribe(valueHandler);
          };
          addInitializer.call(this, function() {
            return el.val(observable.get());
          });
          addInitializer.call(this, function() {
            return observable.subscribe(valueHandler);
          });
          return this;
        },
        bindText: binder('text'),
        bindHtml: binder('html', function(x) {
          return element(x);
        }),
        bindCss: binder('css'),
        bindClass: function(observable, map) {
          var prevClass;
          if (map == null) {
            map = function(x) {
              return x;
            };
          }
          if (!this.id()) {
            this.addAttr({
              id: common.nextId()
            });
          }
          prevClass = map(observable.get());
          this.addAttr({
            "class": prevClass
          });
          observable.subscribe(function(value) {
            el.removeClass(prevClass);
            prevClass = map(value);
            return el.addClass(prevClass);
          });
          return this;
        },
        bindVisible: function(observable, condition) {
          if (condition == null) {
            condition = identity;
          }
          return this.bindCss(observable, function(value) {
            return {
              display: condition(value) ? "" : "none"
            };
          });
        },
        bindDisabled: function(observable, condition) {
          if (condition == null) {
            condition = function(x) {
              return x;
            };
          }
          return this.bindAttr(observable, function(value) {
            return {
              disabled: condition(value)
            };
          });
        },
        bindAttr: binder('attr'),
        on: function(events, selector, handler) {
          var _this = this;
          if (!handler) {
            handler = selector;
            selector = "";
          }
          addInitializer.call(this, function() {
            return el.on(events, selector, _this, handler);
          });
          return this;
        },
        foreach: function(collection, render) {
          var add, addAll, collectionItems, index, item, remove;
          if (!this.id()) {
            this.addAttr({
              id: common.nextId()
            });
          }
          collectionItems = (function() {
            if (_.isFunction(collection)) {
              return collection();
            } else if (_.isArray(collection)) {
              return collection;
            } else {
              throw Error(collection + " is expected to be an Array or model");
            }
          })();
          index = 0;
          this.addItems.apply(this, (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = collectionItems.length; _i < _len; _i++) {
              item = collectionItems[_i];
              _results.push(render(item, index++));
            }
            return _results;
          })());
          add = function(value, index) {
            if (el.children().length === 0 || index === 0) {
              return el.prepend(common.element(render(value, index)));
            } else {
              return el.children().eq(index - 1).after(common.element(render(value, index)));
            }
          };
          remove = function(index) {
            return el.children().eq(index).remove();
          };
          addAll = function(items) {
            var elements;
            index = 0;
            elements = (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = items.length; _i < _len; _i++) {
                item = items[_i];
                _results.push(common.element(render(item, index++)));
              }
              return _results;
            })();
            return el.html(elements);
          };
          if (_.isFunction(collection.subscribe)) {
            collection.subscribe(collection.actionHandler({
              change: addAll,
              filter: addAll,
              add: add,
              remove: remove,
              update: function(value, index, oldIndex) {
                if (index < oldIndex) {
                  add(value, index);
                  return remove(oldIndex + 1);
                } else if (index > oldIndex) {
                  remove(oldIndex);
                  return add(value, index);
                }
              }
            }));
          }
          return this;
        },
        el: function() {
          return el;
        }
      };
    };
  });

}).call(this);
