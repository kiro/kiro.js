// Generated by CoffeeScript 1.4.0
(function() {

  window.BC.define('models', function(models) {
    var actions, assertArray, common, getIndexes;
    common = window.BC.namespace("common");
    assertArray = function(arr) {
      if (!_.isArray(arr)) {
        throw Error(arr + " is expected to be an array");
      }
    };
    getIndexes = function(items, allItems, predicate) {
      var i, indexes, item, usedIndex, _i, _j, _len, _ref;
      indexes = [];
      usedIndex = {};
      for (_i = 0, _len = allItems.length; _i < _len; _i++) {
        item = allItems[_i];
        if (predicate(item)) {
          for (i = _j = 0, _ref = items.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
            if (!usedIndex[i] && items[i] === item) {
              indexes.push(i);
              usedIndex[i] = true;
            }
          }
        }
      }
      return indexes;
    };
    actions = {
      REPLACE_ALL: 'replace_all',
      UPDATE_VIEW: 'update_view',
      ADD: 'add',
      REMOVE: 'remove',
      UPDATE: 'update'
    };
    return models.collection = function(initial, o) {
      var action, allItems, callUpdate, collection, compareFunction, defaultCompare, filter, items, storeHandlers, toPredicate, update;
      if (initial == null) {
        initial = [];
      }
      if (o == null) {
        o = null;
      }
      assertArray(initial);
      allItems = initial;
      items = allItems;
      compareFunction = void 0;
      filter = function() {
        return true;
      };
      action = function(name, value, index, oldIndex) {
        if (index == null) {
          index = -1;
        }
        if (oldIndex == null) {
          oldIndex = -1;
        }
        return {
          name: name,
          value: value,
          index: index,
          oldIndex: oldIndex
        };
      };
      if (!o) {
        o = common.observable((function() {
          return collection();
        }), function(newValue) {
          return collection(newValue);
        });
      }
      collection = function(arg) {
        if (_.isUndefined(arg)) {
          return items;
        } else {
          assertArray(arg);
          allItems = arg;
          return update(function() {
            return action(actions.REPLACE_ALL, items);
          });
        }
      };
      callUpdate = function(item, path) {
        var oldIndex;
        oldIndex = items.indexOf(item);
        return update(function() {
          return action(actions.UPDATE, item, items.indexOf(item), oldIndex);
        });
      };
      update = function(action) {
        var item, _i, _len;
        if (compareFunction) {
          allItems.sort(compareFunction);
        }
        items = _.filter(allItems, filter);
        for (_i = 0, _len = allItems.length; _i < _len; _i++) {
          item = allItems[_i];
          if (common.isModel(item)) {
            item.subscribe(callUpdate);
          }
        }
        return o.publish(items, action());
      };
      update(function() {
        return action(actions.REPLACE_ALL, items);
      });
      toPredicate = function(arg) {
        if (_.isFunction(arg)) {
          return arg;
        } else {
          return function(item) {
            return item === arg;
          };
        }
      };
      collection.add = function(item) {
        allItems.push(item);
        return update(function() {
          return action(actions.ADD, item, items.lastIndexOf(item));
        });
      };
      collection.remove = function(item) {
        var predicate, removeIndexes, removeItems;
        predicate = toPredicate(item);
        removeIndexes = getIndexes(items, allItems, predicate);
        removeItems = _.filter(allItems, predicate);
        allItems = _.filter(allItems, function(item) {
          return !predicate(item);
        });
        return update(function() {
          return action(actions.REMOVE, removeItems, removeIndexes);
        });
      };
      collection.clear = function() {
        allItems = [];
        return update(function() {
          return action(actions.REPLACE_ALL, items);
        });
      };
      collection.filter = function(arg) {
        filter = toPredicate(arg);
        return update(function() {
          return action(actions.UPDATE_VIEW, items);
        });
      };
      collection.count = function(arg) {
        if (_.isUndefined(arg)) {
          return items.length;
        } else if (_.isFunction(arg)) {
          return _.reduce(items, (function(memo, item) {
            if (arg(item)) {
              return 1 + memo;
            } else {
              return memo;
            }
          }), 0);
        } else {
          throw Error(arg + " is expected to be function or undefined");
        }
      };
      collection.total = function(arg) {
        if (_.isUndefined(arg)) {
          return allItems.length;
        } else if (_.isFunction(arg)) {
          return _.reduce(allItems, (function(memo, item) {
            if (arg(item)) {
              return 1 + memo;
            } else {
              return memo;
            }
          }), 0);
        } else {
          throw Error(arg + " is expected to be function or undefined");
        }
      };
      collection.find = function(predicate) {
        var result;
        result = _.filter(items, predicate);
        if (result.length === 0) {
          return void 0;
        } else if (result.length === 1) {
          return result[0];
        } else {
          return result;
        }
      };
      collection.at = function(index) {
        return items[index];
      };
      defaultCompare = function(a, b) {
        if (a > b) {
          return 1;
        } else if (a < b) {
          return -1;
        } else {
          return 0;
        }
      };
      collection.sort = function(f) {
        if (f == null) {
          f = defaultCompare;
        }
        compareFunction = f;
        return update(function() {
          return action(actions.UPDATE_VIEW, items);
        });
      };
      collection.contains = function(item) {
        return _.contains(items, item);
      };
      collection.toJSON = function() {
        return items;
      };
      collection.actionHandler = function(handler) {
        return function(items, action) {
          if (action.name === actions.REPLACE_ALL) {
            return handler.replaceAll(action.value);
          } else if (action.name === actions.UPDATE_VIEW) {
            return handler.updateView(action.value);
          } else if (action.name === actions.ADD) {
            return handler.add(action.value, action.index);
          } else if (action.name === actions.REMOVE) {
            return handler.remove(action.value, action.index);
          } else if (action.name === actions.UPDATE) {
            return handler.update(action.value, action.index, action.oldIndex);
          }
        };
      };
      storeHandlers = [];
      collection.subscribeStore = function(handler) {
        storeHandlers.push(handler);
        return this.subscribe(handler);
      };
      collection.disableStoreNotifications = function() {
        var handler, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = storeHandlers.length; _i < _len; _i++) {
          handler = storeHandlers[_i];
          _results.push(this.unsubscribe(handler));
        }
        return _results;
      };
      collection.enableStoreNotifications = function() {
        var handler, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = storeHandlers.length; _i < _len; _i++) {
          handler = storeHandlers[_i];
          _results.push(this.subscribe(handler));
        }
        return _results;
      };
      return $.extend(collection, o);
    };
  });

}).call(this);
