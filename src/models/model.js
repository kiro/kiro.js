// Generated by CoffeeScript 1.4.0
(function() {
  var common, models;

  models = window.BC.namespace("models");

  common = window.BC.namespace("common");

  models.model = function(arg, deep) {
    var item, key, model, obj, objModel, value, _i, _j, _len, _len1, _results;
    if (deep == null) {
      deep = false;
    }
    model = function(arg) {
      var oldValue, value;
      value = "";
      if (_.isUndefined(arg)) {
        return value;
      } else {
        oldValue = value;
        value = arg;
        this.publish(value);
        return oldValue;
      }
    };
    $.extend(model, observable);
    if (_.isArray(arg)) {
      if (deep) {
        return model((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = arg.length; _i < _len; _i++) {
            item = arg[_i];
            _results.push(models.model(item));
          }
          return _results;
        })());
      } else {
        return model(arg);
      }
    } else if (_.isObject(arg)) {
      if (deep) {
        obj = {};
        for (value = _i = 0, _len = arg.length; _i < _len; value = ++_i) {
          key = arg[value];
          obj[key] = models.model(value, deep);
        }
        objModel = common.observable(obj);
        _results = [];
        for (value = _j = 0, _len1 = arg.length; _j < _len1; value = ++_j) {
          key = arg[value];
          _results.push(objModel.subscribe(objModel[key], function() {
            return objModel.publish(objModel);
          }));
        }
        return _results;
      } else {
        return model(arg);
      }
    } else {
      return model(arg);
    }
  };

}).call(this);
