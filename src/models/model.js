// Generated by CoffeeScript 1.4.0
(function() {

  window.BC.define('models', function(models) {
    var common;
    common = window.BC.namespace("common");
    models.model = function(arg) {
      var model, o, value;
      value = arg;
      o = common.observable();
      model = function(newValue) {
        var oldValue;
        if (_.isUndefined(newValue)) {
          return value;
        } else {
          oldValue = value;
          value = newValue;
          o.publish(value);
          return oldValue;
        }
      };
      model.subscribe = function(listener) {
        return o.subscribe(listener);
      };
      model._set = function(newValue) {
        value = newValue;
        return o.publish(value);
      };
      model._get = function() {
        return value;
      };
      return model;
    };
    models.array = function(arr) {
      var hook, method, mutators, o, _i, _len;
      if (!_.isArray(arr)) {
        throw new Error(arr + " is expected to be an array.");
      }
      o = common.observable();
      mutators = ['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'];
      hook = function(arr, method) {
        var f;
        f = arr[method];
        return arr[method] = function() {
          var result;
          result = f.apply(arr, arguments);
          o.publish(arr);
          return result;
        };
      };
      for (_i = 0, _len = mutators.length; _i < _len; _i++) {
        method = mutators[_i];
        hook(arr, method);
      }
      arr.subscribe = function(callback) {
        return o.subscribe(callback);
      };
      arr._get = function() {
        return arr;
      };
      arr._set = function(newArr) {
        throw Error("set is not supported for arrays");
      };
      return arr;
    };
    return models.object = function(obj) {
      var key, makeObservable, o, observables, prop, result, value;
      if (!_.isObject(obj)) {
        throw Error(obj + " is expected to be an object");
      }
      result = {};
      observables = {};
      makeObservable = function(obj, key, value) {
        if (_.isString(value)) {
          value = new String(value);
        } else if (_.isNumber(value)) {
          value = new Number(value);
        } else if (_.isBoolean(value)) {
          value = new Boolean(value);
        } else if (_.isUndefined(value)) {
          throw Error("value of " + key + " shouldn't be undefined");
        }
        value.subscribe = function(callback) {
          return observables[key].subscribe(callback);
        };
        value._set = function(newValue) {
          return obj[key] = newValue;
        };
        value._get = function() {
          return value;
        };
        return value;
      };
      o = common.observable();
      for (key in obj) {
        value = obj[key];
        observables[key] = common.observable();
        if (_.isArray(value)) {
          value = models.array(value);
        } else if (_.isObject(value)) {
          value = models.object(value);
        } else {
          value = makeObservable(result, key, value);
        }
        value.subscribe(function() {
          return o.publish(result);
        });
        prop = function(key, value) {
          return {
            get: function() {
              return value;
            },
            set: function(newValue) {
              var oldValue;
              oldValue = value;
              value = makeObservable(result, key, newValue);
              observables[key].publish(newValue);
              return oldValue;
            },
            enumerable: true
          };
        };
        Object.defineProperty(result, key, prop(key, value));
      }
      result.subscribe = function(callback) {
        return o.subscribe(callback);
      };
      result._get = function() {
        return result;
      };
      result._set = function() {
        throw Error("set is not supported");
      };
      return result;
    };
  });

}).call(this);
