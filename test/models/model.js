// Generated by CoffeeScript 1.4.0
(function() {
  var common, models, util;

  common = window.BC.namespace("common");

  models = window.BC.namespace("models");

  util = window.BC.namespace("test.util");

  $.extend(this, common, models, util);

  describe("Model tests", function() {
    it("Tests model", function() {
      var expectedValue, flag, subscriptionCalls;
      flag = model(true);
      expect(flag()).toBe(true);
      subscriptionCalls = 0;
      expectedValue = false;
      flag.subscribe(function(value) {
        subscriptionCalls++;
        return expect(value).toBe(expectedValue);
      });
      flag(false);
      expect(subscriptionCalls).toBe(1);
      expectedValue = 1;
      flag(1);
      expect(subscriptionCalls).toBe(2);
      expectedValue = "test";
      flag("test");
      expect(subscriptionCalls).toBe(3);
      expectedValue = "new";
      expect(flag("new")).toEqual("test");
      expectedValue = "";
      expect(flag("")).toEqual("new");
      return expect(flag()).toEqual("");
    });
    it("Tests object observable", function() {
      var firstCalls, lastCalls, obj, objCalls;
      obj = models.object({
        firstName: "Kiril",
        lastName: "Minkov"
      });
      objCalls = 0;
      obj.subscribe(function() {
        return objCalls++;
      });
      firstCalls = 0;
      bind(obj.firstName).subscribe(function() {
        return firstCalls++;
      });
      lastCalls = 0;
      bind(obj.lastName).subscribe(function() {
        return lastCalls++;
      });
      obj.firstName = "Test";
      expect(firstCalls).toBe(1);
      expect(objCalls).toBe(1);
      expect(lastCalls).toBe(0);
      obj.lastName = "Mente";
      expect(firstCalls).toBe(1);
      expect(lastCalls).toBe(1);
      expect(objCalls).toBe(2);
      obj.lastName = "Mente";
      expect(firstCalls).toBe(1);
      expect(lastCalls).toBe(2);
      return expect(objCalls).toBe(3);
    });
    it("Tests nested object observable", function() {
      var languageCalls, languageNameCalls, obj, objCalls;
      obj = models.object({
        firstName: "Kiril",
        lastName: "Minkov",
        cities: ["Plovdiv", "Sofia", "San Francisco", "London"],
        language: {
          name: "Bulgarian",
          confidence: "Profficient"
        }
      });
      objCalls = 0;
      obj.subscribe(function() {
        return objCalls++;
      });
      expect(objCalls).toBe(0);
      obj.firstName = "Mente";
      expect(objCalls).toBe(1);
      languageCalls = 0;
      bind(obj.language).subscribe(function() {
        return languageCalls++;
      });
      languageNameCalls = 0;
      bind(obj.language.name).subscribe(function() {
        return languageNameCalls++;
      });
      obj.language.name = "Test";
      expect(objCalls).toBe(2);
      expect(languageCalls).toBe(1);
      return expect(languageNameCalls).toBe(1);
    });
    it("Tests map", function() {
      var calls, expected, mapped, value;
      value = model(0);
      mapped = models.map(value, function() {
        if (value() < 3) {
          return "Less than 3";
        } else {
          return "Bigger than 3";
        }
      });
      expected = "Less than 3";
      calls = 0;
      mapped.subscribe(function(val) {
        calls++;
        return expect(val).toEqual(expected);
      });
      value(2);
      expect(calls).toBe(1);
      value(1);
      expect(calls).toBe(2);
      expected = "Bigger than 3";
      value(3);
      expect(calls).toBe(3);
      value(4);
      return expect(calls).toBe(4);
    });
    it("Tests path", function() {
      var calls, expectedPath, obj;
      obj = object({
        name: "Test",
        checked: true,
        numbers: [1, 2, 3],
        sub: [
          {
            key: "key1",
            value: "value1"
          }, {
            key: "key2",
            value: "value2"
          }
        ],
        subsub: {
          name: {
            first: "Kiril",
            last: "Minkov"
          },
          age: "I don't want to think about it"
        }
      });
      expectedPath = "";
      calls = 0;
      obj.subscribe(function(value, path) {
        console.log(path);
        expect(path).toEqual(expectedPath);
        return calls++;
      });
      expectedPath = "name";
      obj.name = "Mente";
      expect(calls).toBe(1);
      expectedPath = "checked";
      obj.checked = false;
      expect(calls).toBe(2);
      expectedPath = "numbers.change.add";
      obj.numbers.add(4);
      expect(calls).toBe(3);
      expectedPath = "sub.key";
      obj.sub.get(0).key = "kkk";
      expect(calls).toBe(4);
      expectedPath = "sub.value";
      obj.sub.get(0).value = "vvv";
      expect(calls).toBe(5);
      expectedPath = "subsub.name.first";
      obj.subsub.name.first = "first";
      expect(calls).toBe(6);
      expectedPath = "subsub.age";
      obj.subsub.age = 30;
      return expect(calls).toBe(7);
    });
    it("Tests negate", function() {
      var calls, expected, notVisible, visible;
      visible = model(false);
      notVisible = models.negate(visible);
      expected = false;
      calls = 0;
      notVisible.subscribe(function(value) {
        calls++;
        return expect(value).toEqual(expected);
      });
      expect(notVisible.get()).toEqual(true);
      visible(true);
      expect(calls).toEqual(1);
      expected = true;
      visible(false);
      return expect(calls).toEqual(2);
    });
    it("Tests a bug with set", function() {
      var obj;
      obj = object({
        name: {
          key: "key",
          value: false
        }
      });
      expect(obj.name.value).toBe(false);
      bind(obj.name.value).set(true);
      return expect(obj.name.value).toBe(true);
    });
    return it("Tests a trivial object", function() {
      var calls, obj;
      obj = object({
        value: 1
      });
      calls = 0;
      obj.subscribe(function() {
        return calls++;
      });
      obj.value = 2;
      return expect(calls).toBe(1);
    });
  });

}).call(this);
