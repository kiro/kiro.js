// Generated by CoffeeScript 1.4.0
(function() {
  var common, models, util;

  common = window.BC.namespace("common");

  models = window.BC.namespace("models");

  util = window.BC.namespace("test.util");

  $.extend(this, common, models, util);

  describe("Collection tests", function() {
    var betweenThreeAndFive;
    it("Tests collection", function() {
      var numbers;
      expect(collection([1])()).toEqual([1]);
      expect(collection([1, 2, 3])()).toEqual([1, 2, 3]);
      numbers = collection([1, 2, 3]);
      numbers([4, 5, 6]);
      expect(numbers()).toEqual([4, 5, 6]);
      numbers([7, 8, 9]);
      expect(numbers()).toEqual([7, 8, 9]);
      return expect(collection([1])()).toEqual([1]);
    });
    it("Tests add and addAll", function() {
      var numbers, subscriptionCalls, total;
      subscriptionCalls = 0;
      numbers = collection([1, 2]);
      total = 3;
      numbers.subscribe(function(values) {
        var _i, _results;
        subscriptionCalls++;
        return expect(values).toEqual((function() {
          _results = [];
          for (var _i = 1; 1 <= total ? _i <= total : _i >= total; 1 <= total ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this));
      });
      numbers.add(3);
      expect(numbers()).toEqual([1, 2, 3]);
      expect(subscriptionCalls).toEqual(1);
      total = 5;
      numbers.addAll([4, 5]);
      expect(numbers()).toEqual([1, 2, 3, 4, 5]);
      expect(subscriptionCalls).toEqual(2);
      total = 7;
      numbers.addAll([6, 7]);
      expect(numbers()).toEqual([1, 2, 3, 4, 5, 6, 7]);
      return expect(subscriptionCalls).toEqual(3);
    });
    it("Tests remove", function() {
      var numbers, subscriptionCalls;
      numbers = collection([1, 2, 2, 3, 3]);
      numbers.remove(3);
      expect(numbers()).toEqual([1, 2, 2]);
      numbers.addAll([4, 5, 6]);
      numbers.remove(function(number) {
        return (2 < number && number < 6);
      });
      expect(numbers()).toEqual([1, 2, 2, 6]);
      subscriptionCalls = 0;
      numbers.subscribe(function(values) {
        subscriptionCalls++;
        return expect(values).toEqual([1, 6]);
      });
      numbers.remove(2);
      return expect(subscriptionCalls).toEqual(1);
    });
    it("Tests removeAll", function() {
      var numbers, subscriptionCalls;
      subscriptionCalls = 0;
      numbers = collection([1, 2, 3]);
      numbers.subscribe(function(values) {
        subscriptionCalls++;
        return expect(values).toEqual([]);
      });
      numbers.removeAll();
      expect(numbers()).toEqual([]);
      return expect(subscriptionCalls).toEqual(1);
    });
    it("Tests get", function() {
      var numbers;
      numbers = collection([1, 2, 3]);
      numbers.subscribe(function() {
        throw Error("Get shouldn't trigger an update.");
      });
      expect(numbers.get(1)).toEqual(2);
      expect(numbers.get(0)).toEqual(1);
      return expect(numbers.get(function(number) {
        return number > 0 && number < 3;
      })).toEqual([1, 2]);
    });
    it("Tests count", function() {
      var numbers;
      numbers = collection([1, 2, 3, 4]);
      numbers.subscribe(function() {
        throw Error("Get shouldn't trigger an update.");
      });
      expect(numbers.count()).toEqual(4);
      return expect(numbers.count(function(number) {
        return (1 < number && number < 4);
      })).toEqual(2);
    });
    it("Tests replace", function() {
      var expectedValues, numbers, subscriptionCalls;
      subscriptionCalls = 0;
      numbers = collection([1, 2, 2, 3]);
      expectedValues = [1, 4, 4, 3];
      numbers.subscribe(function(values) {
        subscriptionCalls++;
        return expect(values).toEqual(expectedValues);
      });
      numbers.replace(2, 4);
      expect(numbers()).toEqual([1, 4, 4, 3]);
      expect(subscriptionCalls).toEqual(1);
      expectedValues = [1, 2, 2, 3];
      numbers.replace((function(number) {
        return number === 4;
      }), 2);
      expect(numbers()).toEqual([1, 2, 2, 3]);
      return expect(subscriptionCalls).toEqual(2);
    });
    it("Tests replaceAll", function() {
      var expectedValues, numbers, subscriptionCalls;
      subscriptionCalls = 0;
      expectedValues = [4, 5, 6];
      numbers = collection([1, 2, 3]);
      numbers.subscribe(function(values) {
        subscriptionCalls++;
        return expect(values).toEqual(expectedValues);
      });
      numbers.replaceAll([4, 5, 6]);
      expect(numbers()).toEqual([4, 5, 6]);
      expect(subscriptionCalls).toEqual(1);
      expectedValues = [7, 8, 9];
      numbers.replaceAll([7, 8, 9]);
      expect(numbers()).toEqual([7, 8, 9]);
      return expect(subscriptionCalls).toEqual(2);
    });
    it("Tests filter", function() {
      var expectedValues, numbers, subscriptionCalls;
      subscriptionCalls = 0;
      numbers = collection([1, 2, 3, 4, 5]);
      expectedValues = [1, 2, 3, 4, 5];
      numbers.subscribe(function(values) {
        subscriptionCalls++;
        return expect(values).toEqual(expectedValues);
      });
      expectedValues = [4, 5];
      numbers.filter(function(number) {
        return number > 3;
      });
      expect(numbers.count()).toEqual(2);
      expect(numbers()).toEqual([4, 5]);
      expect(subscriptionCalls).toEqual(1);
      expectedValues = [1, 2, 3, 4, 5];
      numbers.filter(function() {
        return true;
      });
      expect(numbers.count()).toEqual(5);
      expect(numbers()).toEqual([1, 2, 3, 4, 5]);
      expect(subscriptionCalls).toEqual(2);
      expectedValues = [5];
      numbers.filter(5);
      expect(numbers.count()).toEqual(1);
      expect(numbers()).toEqual([5]);
      expect(subscriptionCalls).toEqual(3);
      expectedValues = [];
      numbers.filter(function() {
        return false;
      });
      expect(numbers.count()).toEqual(0);
      expect(numbers()).toEqual([]);
      return expect(subscriptionCalls).toEqual(4);
    });
    betweenThreeAndFive = function(number) {
      return (3 <= number && number <= 5);
    };
    it("Tests filter with add", function() {
      var numbers;
      numbers = collection([1, 2, 3, 4, 5, 6]);
      numbers.filter(betweenThreeAndFive);
      numbers.add(7);
      expect(numbers()).toEqual([3, 4, 5]);
      numbers.add(3);
      return expect(numbers()).toEqual([3, 4, 5, 3]);
    });
    it("Tests filter with replace and replaceAll", function() {
      var numbers;
      numbers = collection([1, 2, 3, 4, 5, 6]);
      numbers.filter(betweenThreeAndFive);
      numbers.replace(3, 7);
      expect(numbers()).toEqual([4, 5]);
      numbers.replace(7, 3);
      expect(numbers()).toEqual([3, 4, 5]);
      numbers.replaceAll([1, 2, 3]);
      return expect(numbers()).toEqual([3]);
    });
    it("Tests filter with remove and removeAll", function() {
      var numbers;
      numbers = collection([1, 2, 3, 4, 5, 6]);
      numbers.filter(betweenThreeAndFive);
      numbers.remove(3);
      expect(numbers()).toEqual([4, 5]);
      numbers.remove(1);
      expect(numbers()).toEqual([4, 5]);
      numbers.removeAll();
      return expect(numbers()).toEqual([]);
    });
    return it("Tests total", function() {
      var numbers;
      numbers = collection([1, 2, 3, 4]);
      numbers.filter(betweenThreeAndFive);
      expect(numbers.total()).toBe(4);
      expect(numbers.count()).toBe(2);
      return expect(numbers.total(betweenThreeAndFive)).toBe(2);
    });
  });

}).call(this);
