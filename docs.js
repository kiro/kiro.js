// Generated by CoffeeScript 1.4.0
(function() {
  var bootstrap, docs, models;

  docs = window.BC.namespace("docs");

  docs.api = window.BC.namespace("docs.api");

  bootstrap = window.BC.namespace("bootstrap");

  models = window.BC.namespace("models");

  $.extend(this, bootstrap, models, docs);

  docs.api.index = function(content) {
    if (content == null) {
      content = docs.api.model();
    }
    return div(div().span3(nav(a({
      href: '#/api/model/'
    }, "Model"), a({
      href: '#/api/bindings/'
    }, "Bindings"), a({
      href: '#/api/collection/'
    }, "Collection"), docs.toLi).addClass('nav-list bs-docs-sidenav sidenav affix')), div().span9(content));
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var bootstrap, docs, models;

  docs = window.BC.namespace("docs");

  docs.api = window.BC.namespace("docs.api");

  bootstrap = window.BC.namespace("bootstrap");

  models = window.BC.namespace("models");

  $.extend(this, bootstrap, models, docs);

  docs.api.bindings = function() {
    return section(h1("Bindings"), docs.code.bindings(), p("Each html element offers number of bindings, which allow to bind the value of a certain\nproperty to a model. The values of the bindings update automatically when the\nmodel changes."), example("Value bindings", "Input elements can accept one model and bind their value to it.", function() {
      var married, sex, text;
      text = model("initial");
      sex = model("female");
      married = object({
        value: false
      });
      return body(form.inline(input.text(text), span(text), button.info("Clear", function() {
        return text("");
      })), input.radio({
        name: "sex",
        value: "male"
      }, sex), input.radio({
        name: "sex",
        value: "female"
      }, sex), input.radio({
        name: "sex",
        value: "other"
      }, sex), span(sex), input.checkbox(bind(married.value)), span(bind(married.value)));
    }), example("Html bindings", "Html can accept one model and bind their html content to it.", function() {
      var content, i, items, text;
      text = model("");
      content = model();
      items = [
        button.warning("Button"), "<h2>Test</h2>", form.inline(input.text(text), button.info("Clear", function() {
          return text("");
        }))
      ];
      i = 0;
      content(items[0]);
      return body(form.inline(input.text(text), h2(text)), button("Next", function() {
        return content(items[++i % items.length]);
      }), h6("html"), div(content));
    }), example(".bindCss", "<code>.bindCss(model, map)</code> binds css properties of an element to a model.\nIt expects the value of the model to be an object whose fields are names of\ncss properties and have corresponding values or it can map a model to css properties.", function() {
      var f, _i, _results;
      f = model(function(x) {
        return x;
      });
      return body(button.group(button("x", function() {
        return f(function(x) {
          return x;
        });
      }), button("x^2", function() {
        return f(function(x) {
          return (x - 50) * (x - 50) / 30;
        });
      }), button("log", function() {
        return f(function(x) {
          return Math.log(x) * 20;
        });
      }), button("sin", function() {
        return f(function(x) {
          return Math.sin((x - 50) / 10) * 50 + 50;
        });
      })), div({
        "class": 'area'
      }).foreach((function() {
        _results = [];
        for (_i = 1; _i <= 100; _i++){ _results.push(_i); }
        return _results;
      }).apply(this), function(x) {
        return div({
          "class": 'point'
        }).bindCss(f, function(fn) {
          return {
            left: x + 'px',
            bottom: fn(x) + 'px'
          };
        });
      }));
    }), example(".bindClass", "<code>.bindClass(model, map)</code> binds a class to a model.", function() {
      var count;
      count = model(0);
      return body(span(count), button("+1", function() {
        return count(count() + 1);
      }).bindClass(count, function() {
        if (count() > 3 && count() < 8) {
          return 'btn-danger';
        }
      }));
    }), example(".bindDisabled", "<code>.bindDisabled(model, map)</code> Binds whether an element is disabled.", function() {
      var isThree, number;
      number = model(0);
      isThree = function() {
        return number() === 3;
      };
      return body(p("You've clicked ", span(number), " times"), button("Click me", function() {
        return number(number() + 1);
      }).bindDisabled(number, isThree), p("That's too many clicks!", button('Reset Clicks', function() {
        return number(0);
      })).bindVisible(number, isThree));
    }), example(".bindVisible", "<code>.bindVisible(model, map)</code> Binds whether an element is visible.", function() {
      var visible;
      visible = model(false);
      return body(button.success("Hide", function() {
        return visible(!visible());
      }).bindText(visible, function() {
        if (visible()) {
          return "Hide";
        } else {
          return "Show";
        }
      }), button.primary("Button").bindVisible(visible));
    }), example(".foreach", "Binds the content of an element to a collection.\n<code>.foreach(collection, render)</code>\n<ul>Parameters\n<li>collection - collection of items</li>\n<li>render(item, index) - takes an element and optional index and renders the item</li>\n</ul>", function() {
      var numbers;
      numbers = collection([5, 3, 2, 7]);
      return body(div().foreach(numbers, function(number, index) {
        return div(type.label(number + " @ " + index));
      }));
    }), example(".on", " Binds event handlers to an element. It has the same parameters as the jquery on method and it uses it internally.\n<code>.on(event, filter [optional], callback)</code>\n\n<ul>Paramaters\n<li> event - event name, for example \"click\" </li>\n<li> filter - optional element filter <code> ul(li(\"a\"), li(\"b\")).on('click', 'li', -> console.log('test'))</code> </li>\n<li> handler(eventObject) - event handler that takes the jquery event object. </li>\n</ul>", function() {
      var clicks;
      clicks = model(0);
      return body(div("Click me").on('click', function() {
        return clicks(clicks() + 1);
      }), "clicks : ", span(clicks));
    }), example(".onUpdate", " Executes a callback when the DOM element is updated if a binding changes. Useful when want to do some jquery manipulation after an update.", function() {
      var messages, text;
      text = model("");
      messages = collection(["123", "123", "123", "123"]);
      return body(div({
        "class": 'messages short'
      }).foreach(messages, function(message) {
        return p(message);
      }).onUpdate(function(el) {
        return el.scrollTop(el[0].scrollHeight);
      }), form.inline(input.text(text), button("Add", function() {
        return messages.add(text(""));
      })));
    }), example(".onInit", " Executes a callback when a tag eleemnt is created. Useful for calling jquery plugins.", function() {
      var city;
      city = model("");
      return body(input.text(city).onInit(function(el) {
        return el.typeahead({
          source: ["Sofia", "London", "San Francisco", "Palo Alto"]
        });
      }));
    }));
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var bootstrap, docs, models, showCollection;

  docs = window.BC.namespace("docs");

  docs.api = window.BC.namespace("docs.api");

  bootstrap = window.BC.namespace("bootstrap");

  models = window.BC.namespace("models");

  $.extend(this, bootstrap, models, docs);

  showCollection = function() {};

  docs.api.collection = function() {
    return section(h1("Collection"), docs.code.collection(), p("Collection is a function and it's value can be set using <code>collection([1, 2, 3])</code> and get using <code>collection()</code> "), example(".add", "<p><code>.add(value)</code> Appends an item to the collection. </p>", function() {
      var numbers, value;
      numbers = collection([1, 2, 3]);
      value = model("");
      showCollection = function(collection) {
        return div({
          "class": 'circles'
        }).foreach(collection, function(item) {
          return div({
            "class": 'circle'
          }, item).on('click', function() {
            return collection.remove(item);
          });
        });
      };
      return body(showCollection(numbers), form.inline(input.text(value), button.success('Add', function() {
        return numbers.add(value(""));
      })));
    }), example(".remove", "<p><code>.remove(item)</code> removes item.</p>\n<p><code>.remove(predicate)</code> remove all items that match the predicate.</p>", function() {
      var biggerThan, limit, numbers;
      numbers = collection([1, 2, 3, 4, 5, 6]);
      limit = model(3);
      biggerThan = function(number) {
        return number > limit();
      };
      return body(form.inline(button.danger("Remove", function() {
        return numbers.remove(biggerThan);
      }), " bigger than ", input.text(limit)), "or click on a number to remove it", showCollection(numbers));
    }), example(".clear", "Removes all items from a collection.", function() {
      var numbers;
      numbers = collection([1, 2, 3, 4]);
      return body(showCollection(numbers), button.danger("clear", function() {
        return numbers.clear();
      }));
    }), example(".filter", "Filters items from the collection. The filtered items are not removed and\nonce a new filter is set it's applied on all the initial items.\n\n<p><code>.filter(predicate)</code> filters all items that match the predicate </p>", function() {
      var biggerThan, limit, numbers;
      numbers = collection([1, 2, 3, 4, 5, 6]);
      limit = model(3);
      biggerThan = function(number) {
        return number > limit();
      };
      return body(showCollection(numbers), form.inline(button.danger("Filter", function() {
        return numbers.filter(biggerThan);
      }), " bigger than ", input.text(limit).span1()));
    }), example(".count", "Counts the current items in a collection. If there is a filter it counts only the\nitems that match it.\n\n<p><code>.count()</code> Returns the number of the current items in the collection.</p>\n<p><code>.count(predicate)</code> Returns the number of the current items in the collection that match the predicate.</p>", function() {
      var numbers;
      numbers = collection([1, 2, 3, 4, 5, 6]);
      numbers.filter(function(number) {
        return number > 2;
      });
      return body("Click on a number to remove it", showCollection(numbers), span(map(numbers, function() {
        return 'Count ' + numbers.count();
      })), span(map(numbers, function() {
        return 'Even ' + numbers.count(function(number) {
          return number % 2 === 0;
        });
      })));
    }), example(".total", "Counts all items in a collection, including the filtered.\n\n<p><code>.total()</code> Returns the number of items in the collection.</p>\n<p><code>.total(predicate)</code> Returns the number of items in the collection that match the predicate</p>", function() {
      var even, numbers;
      numbers = collection([1, 2, 3, 4, 5, 6]);
      numbers.filter(function(number) {
        return number > 2;
      });
      even = function(number) {
        return number % 2 === 0;
      };
      return body("Click on a number to remove it", showCollection(numbers), p(map(numbers, function() {
        return "Showing " + (numbers.count()) + " of " + (numbers.total());
      })), p(map(numbers, function() {
        return 'Even ' + numbers.total(even);
      })));
    }), example(".find", "<p><code>.find(predicate)</code> gets the items matching the predicate.</p>\nIf there is only one match it returns it.\nIf there are multiple matches it returns an array.", function() {
      var byId, user, users;
      user = function(id, name) {
        return {
          id: id,
          name: name
        };
      };
      users = collection([user(1, "Check"), user(2, "Test user"), user(3, "User 123")]);
      byId = function(id) {
        return function(user) {
          return user.id.toString() === id.toString();
        };
      };
      return body(p(JSON.stringify(users.find(byId(1)))), p(JSON.stringify(users.find(function(item) {
        return item.id > 1;
      }))));
    }), example(".at", "<p><code>.at(index)</code> gets the element at position index.</p>", function() {
      var user, users;
      user = function(id, name) {
        return {
          id: id,
          name: name
        };
      };
      users = collection([user(1, "Check"), user(2, "Test user"), user(3, "User 123")]);
      return body(p(JSON.stringify(users.at(1))), p(JSON.stringify(users.at(2))));
    }), example(".sort", "<code>sort([optional]comparator)</code> Sorts the elements in the collection and maintains the collection in sorted order ", function() {
      var numbers, text;
      numbers = collection([2, 6, 3]);
      numbers.sort();
      text = model("");
      return body("Click on a number to remove it", showCollection(numbers), form.inline(input.text(text), button("Add", function() {
        return numbers.add(Number(text()));
      })));
    }), example(".subscribe", "<code>subscribe(handler)</code>Subscribes to changes in the collection. This includes changes to the models\nwithin the collection. The subscription handler receives the items in the collection\nand a string which describes the changed value.", function() {
      var count, pathModel, player, players, values;
      player = object({
        name: "Name",
        count: 0
      });
      count = model(2);
      pathModel = model("");
      values = model();
      players = collection([player, count, 3]);
      players.subscribe(function(items, path) {
        pathModel(path);
        return values(JSON.stringify(items));
      });
      return body(form({
        "Name": input.text(bind(player.name)),
        "Count": input.text(bind(player.count))
      }), form.inline(span(count), button("+1", function() {
        return count(count() + 1);
      }), button("-1", function() {
        return count(count() - 1);
      })), "Path : ", span(pathModel), pre(code(values)));
    }));
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var bootstrap, docs, models;

  docs = window.BC.namespace("docs");

  docs.api = window.BC.namespace("docs.api");

  bootstrap = window.BC.namespace("bootstrap");

  models = window.BC.namespace("models");

  $.extend(this, bootstrap, models, docs);

  docs.api.model = function() {
    return section(h1("Model"), docs.code.model(), p("Models constructs observables from values or objects."), example("Model", "Creates an observable value. <code>x = model(value)</code> creates a new observable.\nCalling <code>x()</code> gets the value of the observable. <code>x(newValue)</code> sets\nthe value of the observable. Observable values can be bound to properties of the dom elements\nand they will be automatically updated when the value changes.", function() {
      var count, text;
      count = model(0);
      text = model("");
      count.subscribe(function() {
        return text("Total count " + count());
      });
      return body(button.primary("+1", function() {
        return count(count() + 1);
      }), span(text));
    }), example("Object", "Using <code>object(obj)</code> makes a new object each field of\nwhich is observable. Nested objects are also converted to observable\nand nested arrays to collection, the objects it arrays are also converted to\nobservables. To get the observable for a field <code>bind(obj.field)</code> must\nbe used. Changes to a field within the object are propagated upwards,\nso if you subscribe to an object changes to all fields and subfields will\nresult calling the subscription.", function() {
      var location, obj;
      obj = object({
        name: "Kiril Minkov",
        cool: true,
        age: 25,
        locations: ["London", "Cambridge"],
        language: {
          name: "Bulgarian",
          "native": false
        }
      });
      location = model("");
      return body(form({
        "Name": input.text(bind(obj.name)),
        "Cool": input.checkbox(bind(obj.cool)),
        "Age": input.text(bind(obj.age)),
        "Locations": [
          div().foreach(obj.locations, function(location) {
            return span(type.label(location).on('click', function() {
              return obj.locations.remove(location);
            }), "&nbsp;");
          }), append(input.text(location).placeholder("Add location..."), button("Add", function() {
            return obj.locations.add(location(""));
          }))
        ],
        "Language": input.text(bind(obj.language.name)),
        "Native": input.checkbox(bind(obj.language["native"]))
      }), pre(code(map(obj, function() {
        return JSON.stringify(obj, null, 4);
      }))));
    }), example("Map", "Creates a new model that maps the value of a model. ", function() {
      var count;
      count = object({
        value: 1
      });
      return body(button("+1", function() {
        return count.value++;
      }).bindDisabled(map(bind(count.value), function() {
        return count.value > 3;
      })), span(bind(count.value)));
    }));
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var bootstrap, docs, models;

  docs = window.BC.namespace("docs");

  docs.bootstrap = window.BC.namespace("docs.bootstrap");

  bootstrap = window.BC.namespace("bootstrap");

  models = window.BC.namespace("models");

  $.extend(this, bootstrap, models, docs);

  docs.bootstrap.index = function(content) {
    if (content == null) {
      content = docs.bootstrap.scaffolding();
    }
    return div(div().span3(nav(a({
      href: '#/bootstrap/scaffolding/'
    }, "Scaffolding"), a({
      href: '#/bootstrap/table/'
    }, "Tables"), a({
      href: '#/bootstrap/type/'
    }, "Typography"), a({
      href: '#/bootstrap/buttons/'
    }, "Buttons"), a({
      href: '#/bootstrap/forms/'
    }, "Forms"), a({
      href: '#/bootstrap/nav/'
    }, "Navigation"), docs.toLi).addClass('nav-list bs-docs-sidenav sidenav affix')), div().span9(content));
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var bootstrap, docs, models;

  docs = window.BC.namespace("docs");

  docs.bootstrap = window.BC.namespace("docs.bootstrap");

  bootstrap = window.BC.namespace("bootstrap");

  models = window.BC.namespace("models");

  $.extend(this, bootstrap, models, docs);

  docs.bootstrap.buttons = function() {
    return section(h1("Buttons"), docs.code.buttons(), example("Button styles", "Button styles for different actions", function() {
      var text;
      text = model("");
      return body(button("Default", function() {
        return text("I'm default");
      }), button.primary("Primary", function() {
        return text("Take this primary");
      }), button.info("Info", function() {
        return text("Info, info");
      }), button.warning("Warning", function() {
        return text("Warning");
      }), button.success("Success", function() {
        return text("Success");
      }), button.danger("Danger", function() {
        return text("Danger");
      }), button.inverse("Inverse", function() {
        return text("Inverse");
      }), button.link("Link", function() {
        return text("Link");
      }), span(text));
    }), example("Dropdown buttons", "Creating dropdown and segmented dropdown buttons", function() {
      return body(dropdown(button.info("Hello"), a("Hi"), a("How"), dropdown.divider(), a("Is it going?")), dropdown.segmented(button.info("Hello", function() {
        return console.log("Hello");
      }), a("Hi", function() {
        return console.log("Hi");
      }), a("How"), dropdown.divider(), a("Is it going?")));
    }), example("Button sizes", "Builder methods for different button sizes", function() {
      return body(button.primary("Large").large(), button.info("Default"), button.warning("Small").small(), button.danger("Mini").mini());
    }), example("Block level buttons", "Creating block level buttons", function() {
      return body(button.primary("Block").block().large(), button("Block").block());
    }), example("Disabled button", "Binding the disabled property of a button", function() {
      var disabled;
      disabled = model(true);
      return body(button.danger("Disable", function() {
        return disabled(true);
      }), button.success("Enable", function() {
        return disabled(false);
      }), button("Disabled").bindDisabled(disabled).bindText(disabled, function() {
        if (disabled()) {
          return "Disabled";
        } else {
          return "Enabled";
        }
      }));
    }), example("Single button group", "Group button together", function() {
      return body(button.group(button("One"), button.success("Two"), button.danger("Three")));
    }), example("Button toolbar", "Put groups of button together", function() {
      return body(button.toolbar(button.group(button("1"), button("2"), button("3")), button.group(button("4"), button("5")), button.group(button("6"))));
    }), example("Button group vertical", "Stack buttons vertically", function() {
      return body(button.group.vertical(button(icon.arrow_down), button(icon.arrow_left), button(icon.arrow_right), button(icon.arrow_up)));
    }));
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var bootstrap, docs, models;

  docs = window.BC.namespace("docs");

  docs.bootstrap = window.BC.namespace("docs.bootstrap");

  bootstrap = window.BC.namespace("bootstrap");

  models = window.BC.namespace("models");

  $.extend(this, bootstrap, models, docs);

  docs.bootstrap.forms = function() {
    return section(h1("Forms"), docs.code.forms(), example("Default styles", "Default from style", function() {
      return body(form({
        legend: "Legend",
        'Label name': div(input.text().placeholder("Type something..."), help.block("Example block-level help text here.")),
        'Check me out': input.checkbox(),
        '': button.submit("Submit me")
      }));
    }), example("Search form", "form has fields for different styles", function() {
      return body(form.search(input.search().medium(), button.submit('Search')));
    }), example("Inline form", "Usage of form.inline", function() {
      return body(form.inline(input.text().small().placeholder("Email"), input.password().small().placeholder("Password"), input.checkbox().label("Remember me"), button.submit("Sign in")));
    }), example("Horizontal form", "Creating horizontal form, it can have field without label", function() {
      return body(form.horizontal({
        'Email': input.text().placeholder('Email'),
        'Password': input.password().placeholder('Password'),
        'Remember me': input.checkbox(),
        '': button.submit("Sign in")
      }));
    }), example("Textarea", "Textarea input, it can bind the value", function() {
      var value;
      value = model("text");
      return body(textarea({
        rows: 3
      }, value), span(value));
    }), example("Stacked radio and checkbox", "Radio and checkbox inputs", function() {
      return body(input.checkbox().label("Option 1"), input.radio({
        name: "radio",
        value: "value1"
      }).label("Option 1"), input.radio({
        name: "radio",
        value: "value2"
      }).label("Option 2"));
    }), example("Inline checkboxes", "Inline checkboxes", function() {
      return body(input.checkbox().inlineLabel("1"), input.radio({
        name: "radio",
        value: "value1"
      }).inlineLabel("2"), input.radio({
        name: "radio",
        value: "value2"
      }).inlineLabel("3"));
    }), example("Append input", "Appending buttons and values to input, the first value is the input the rest are the controls", function() {
      return body(append(input.text(), "@"), append(input.text(), button("Do it!"), button("Another one!")));
    }), example("Prepend input", "Prepending values to input, the last value is the input the others are the prepended controls", function() {
      return body(prepend("@", input.text()), prepend(button("Check"), input.text()));
    }), example("Search box append and prepend", "Appending prepending to search box", function() {
      return body(form.search(append(input.text({
        "class": "input-medium search-query"
      }), button.submit('Search')), prepend(button.submit('Search'), input.text({
        "class": "input-medium search-query"
      }))));
    }), example("Input size styles", "Builder methods for input sizes", function() {
      return body(div({
        "class": "controls docs-input-sizes"
      }, input.text().mini().placeholder('mini'), input.text().small().placeholder('small'), input.text().medium().placeholder('medium'), input.text().large().placeholder('large'), input.text().xlarge().placeholder('xlarge'), input.text().xxlarge().placeholder('xxlarge')));
    }), example("Input span", "Span style builder methods for input sizes", function() {
      var i, items;
      items = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 1; _i <= 5; i = ++_i) {
          _results.push(option(i));
        }
        return _results;
      })();
      return body(div({
        "class": "controls docs-input-sizes"
      }, input.text().span2().placeholder('span2'), input.text().span4().placeholder('span4'), input.text().span6().placeholder('span6'), select().span2(items), select().span4(items), select().span6(items)));
    }), example("Row inputs", "Span style input sizes", function() {
      return body(div({
        "class": "docs-input-sizes"
      }, div.controls.row(input.text().span1(), input.text().span5()), div.controls.row(input.text().span3(), input.text().span3()), div.controls.row(input.text().span5(), input.text().span1())));
    }), example("Form actions in action", "If values are passed after the form fields object, they are appended as form action", function() {
      return body(form.horizontal({
        "First Name": input.text(),
        "Last Name": input.text(),
        actions: [button("Submit"), button("Remove")]
      }));
    }), example("Different image styles", "predefined image styles, it accepts config object with src and class proeprties", function() {
      return body(img({
        "class": 'image',
        src: 'img.jpeg'
      }), img.polaroid({
        "class": 'image',
        src: 'img.jpeg'
      }), img.circle({
        "class": 'image',
        src: 'img.jpeg'
      }), img.rounded({
        "class": 'image',
        src: 'img.jpeg'
      }));
    }), example("Icons", "Use <code>icon.</code> for the icons ", function() {
      var name, value;
      return body([
        (function() {
          var _results;
          _results = [];
          for (name in icon) {
            value = icon[name];
            _results.push(value);
          }
          return _results;
        })()
      ]);
    }), example("Icon buttons", "Examples of using icons", function() {
      return body(button(icon.asterisk, "Asterisk"), form({
        "Email": prepend(icon.envelope, input.text())
      }), ul({
        "class": "nav nav-list"
      }, li({
        "class": "active"
      }, a(icon.home, 'Home')), li(a(icon.book, 'Library')), li(a(icon.pencil, "Applications")), li(a("Misc"))));
    }));
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var bootstrap, docs, models;

  docs = window.BC.namespace("docs");

  docs.bootstrap = window.BC.namespace("docs.bootstrap");

  bootstrap = window.BC.namespace("bootstrap");

  models = window.BC.namespace("models");

  $.extend(this, bootstrap, models, docs);

  docs.bootstrap.nav = function() {
    return section(h1("Navigation"), docs.code.nav(), example("Tabs", "It need the tabs bootstrap javascript to run correctly.", function() {
      return body(tabs(tab("Tab 1", button("A button in a tab"), p("Boring tab")), tab("Tab 2", p("Test Test"), p("Test 2"))));
    }), example("Different tab location", "Tabs can be positioned left, right and below.", function() {
      return body(tabs(tab("Top 1"), tab("Top 2")), tabs(tab("Left 1"), tab("Left 2")).left(), tabs(tab("Right 1"), tab("Right 2")).right(), tabs(tab("Below 1"), tab("Below 2")).below());
    }), example("Stacked tabs", "Stacked tabs navigation. The tab is expected to take the name of the tab and a click handler.", function() {
      return body(tabs(tab({
        name: "Home",
        click: function() {
          return console.log("Home");
        }
      }), tab({
        name: "About",
        click: function() {
          return console.log("About");
        }
      }), tab({
        name: "Test",
        click: function() {
          return console.log("Test");
        }
      })).stacked());
    }), example("Pills", "Displays a list of links as pills.", function() {
      return body(pills(pill("Home", function() {
        return console.log("Going home");
      }), pill("About"), pill("Blog")));
    }), example("Stacked Pills", "Displays stacked pills and shows disabled", function() {
      var disabled;
      disabled = model(true);
      return body(pills.stacked(pill("Home", function() {
        return console.log("Going home");
      }), pill("About"), pill("Blog").bindClass(disabled, function() {
        if (disabled()) {
          return 'disabled';
        }
      })));
    }), example("Basic navbar", "Displays basic navbar, with brand and dividers", function() {
      return body(div.container.fluid(navbar(navbar.brand('Sample brand'), nav(navbar.divider(), a("Home"), a("Examples"), navbar.divider(), a("About")))));
    }), example("Navbar forms", "navbar.form and navbar.search can be used for normal\nand search styled forms respectively. The can be aligned\nusing left and right", function() {
      return body(div.container.fluid(navbar(right(navbar.form(input.text().span2().placeholder("Username"), input.password().span2().placeholder("Password"), button.success("Login"))), left(navbar.search(input.search().span2().placeholder("Search"))))));
    }), example("Navbar positioning", "<code>fixedTop()</code>\n<code>fixedBottom()</code> <code>staticTop()</code>\ncan be used to set the navbar positioning.\n<code>inverse()</code> sets inverse color scheme.", function() {
      return body(div.container.fluid(navbar(navbar.brand("Brand"), nav(a("Home"))).inverse()));
    }));
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var body, bootstrap, docs,
    __slice = [].slice;

  docs = window.BC.namespace("docs");

  docs.bootstrap = window.BC.namespace("docs.bootstrap");

  bootstrap = window.BC.namespace("bootstrap");

  $.extend(this, bootstrap, docs);

  body = function() {
    var items;
    items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return div(items).addClass('bs-docs-example scaffolding');
  };

  docs.bootstrap.scaffolding = function() {
    return section(h1("Scaffolding"), docs.code.scaffolding(), example("Grid building", "Div has fields for different grid styles", function() {
      return body(div.container(div.row(div().span2("2"), div().span10("10")), div.row(div().span2("2"), div().span5("5"), div().span5("5")), div.row(div().span3("3"), div().span3("3"), div().span3("3"), div().span3("3"))));
    }), example("Creating div with passing classes directly", "Div has set of predefined styles for ease of use.", function() {
      return body(div.container(div.row(div({
        "class": "span12"
      }, "12"))));
    }), example("Grid with offset", "Using spanX and offsetX builder methods, they can take as additional paramters the content of the div", function() {
      return body(div.container(div.row(div().span3().offset2("3,2"), div().span4().offset3("4,3")), div.row(div().span3().offset1("3,1"), div().span2().offset3("2,3"), div().span1().offset2("1,2"))));
    }), example("Grid with nested columns", "Using nesting", function() {
      return body(div.container(div.row(div().span12("Nested", div.row(div().span6("Nested 6"), div().span6("Nested 6"))))));
    }), example("Fluid layout", "Using div.container.fluid and div.row.fluid", function() {
      return body(div.container.fluid(div.row.fluid(div().span2().offset4("2,4"), div().span3().offset3("3,3")), div.row.fluid(div().span6("Nested fluid", div.row.fluid(div().span6("6"), div().span6("6"))), div().span6("6"))));
    }));
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var bootstrap, docs;

  docs = window.BC.namespace("docs");

  docs.bootstrap = window.BC.namespace("docs.bootstrap");

  bootstrap = window.BC.namespace("bootstrap");

  $.extend(this, bootstrap, docs);

  docs.bootstrap.table = function() {
    return section(h1("Tables"), docs.code.table(), example("Table", "Table construction.", function() {
      var i, j;
      return body(table(thead(tr((function() {
        var _i, _results;
        _results = [];
        for (i = _i = 1; _i <= 5; i = ++_i) {
          _results.push(th("Column " + i));
        }
        return _results;
      })())), (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 1; _i <= 5; i = ++_i) {
          _results.push(tr((function() {
            var _j, _results1;
            _results1 = [];
            for (j = _j = 1; _j <= 5; j = ++_j) {
              _results1.push(td(i + "," + j));
            }
            return _results1;
          })()));
        }
        return _results;
      })()));
    }), example("Stripped table", "Builder method for stripped table.", function() {
      var i, j;
      return body(table().stripped(thead(tr((function() {
        var _i, _results;
        _results = [];
        for (i = _i = 1; _i <= 5; i = ++_i) {
          _results.push(th("Column " + i));
        }
        return _results;
      })())), (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 1; _i <= 5; i = ++_i) {
          _results.push(tr((function() {
            var _j, _results1;
            _results1 = [];
            for (j = _j = 1; _j <= 5; j = ++_j) {
              _results1.push(td(i + "," + j));
            }
            return _results1;
          })()));
        }
        return _results;
      })()));
    }), example("Mega table", "Using builder methods for different table classes, each of them can take as a parameter the content of the table.", function() {
      var i, j;
      return body(table().stripped().condensed().hover().bordered(thead(tr((function() {
        var _i, _results;
        _results = [];
        for (i = _i = 1; _i <= 5; i = ++_i) {
          _results.push(th("Column " + i));
        }
        return _results;
      })())), (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 1; _i <= 5; i = ++_i) {
          _results.push(tr((function() {
            var _j, _results1;
            _results1 = [];
            for (j = _j = 1; _j <= 5; j = ++_j) {
              _results1.push(td(i + "," + j));
            }
            return _results1;
          })()));
        }
        return _results;
      })()));
    }), example("Row classes", "Builder methods for table row style, each of them can take the row content.", function() {
      return body(table(tr().info(td(1), td(2)), tr().warning(td(3), td(4)), tr().success(td(5), td(6)), tr().error(td(7), td(8))));
    }));
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var bootstrap, docs;

  docs = window.BC.namespace("docs");

  docs.bootstrap = window.BC.namespace("docs.bootstrap");

  bootstrap = window.BC.namespace("bootstrap");

  $.extend(this, bootstrap, docs);

  docs.bootstrap.type = function() {
    return section(h1("Typography"), docs.code.type(), example("Headings", "Heading styles, correspond to the html tags.", function() {
      return body(h1("Heading 1"), h2("Heading 2"), h3("Heading 3"), h4("Heading 4"), h5("Heading 5"), h6("Heading 6"));
    }), example("Emphasis", "Emphasis methods.", function() {
      return body(p(small("Small text")), p(bold("Bold text")), p(italic("Italics text")), p().lead("Lead paragraph"));
    }), example("Text context", "Using builder methods for highlighting the content of a p, each of them can accept the content.", function() {
      return body(p().muted("Fusce dapibus, tellus ac cursus commodo, tortor mauris nibh."), p().warning("Etiam porta sem malesuada magna mollis euismod."), p().error("Donec ullamcorper nulla non metus auctor fringilla."), p().success("Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis."), p().info("Duis mollis, est non commodo luctus, nisi erat porttitor ligula.  "));
    }), example("Address", "Address building", function() {
      return body(address(bold("Full Name"), "Address line 1", "Address line 2", '<abbr title="Phone">P:</abbr> (123) 456-7890'));
    }), example("Blockquote", "Using blockquotes.", function() {
      return body(blockquote(p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante."), small("Kiril Minkov")));
    }), example("List", "", function() {
      return body(ul(li('Item 1'), li('Item 2'), li('Item 3'), li('Item 4')));
    }), example("Ordered list", "", function() {
      return body(ol(li('Item 1'), li('Item 2'), li('Item 3'), li('Item 4')));
    }), example("Unstyled list", "", function() {
      return body(ul.unstyled(li('Item 1'), li('Item 2'), li('Item 3'), li('Item 4')));
    }), example("Inline list", "The ul element has predefined class for inline list.", function() {
      return body(ul.inline(li('Item 1'), li('Item 2'), li('Item 3'), li('Item 4')));
    }), example("Description list", "Direct corrspondance with the html elements.", function() {
      return body(dl(dt('Description 1'), dd(span().success('Item 2')), dt('Description 3'), dd(span().warning('Item 4'))));
    }), example("Horizontal description list", "dl has predefined class for horizontal list.", function() {
      return body(dl.horizontal(dt('Description 1'), dd(span().success('Item 2')), dt('Description 3'), dd(span().warning('Item 4'))));
    }), example("Code", "Code inlining.", function() {
      return body(span("For example,", code('System.out.pintln("Hello World")'), 'should be wrapped as inline.'));
    }), example("Pre", "Pre", function() {
      return body(pre("code", "code"));
    }), example("Labels", 'Use label to specify different label classes', function() {
      return body(type.label('default'), type.label().info("info"), type.label().warning('warning'), type.label().inverse('inverse'), type.label().important('error'), type.label().success('success'));
    }), example("Badges", 'Use badge to specify different badge classes', function() {
      return body(type.badge('default'), type.badge().info("info"), type.badge().warning('warning'), type.badge().inverse('inverse'), type.badge().important('error'), type.badge().success('success'));
    }));
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var bootstrap, docs, isActive, models, oldSetInterval, previousInterval,
    __slice = [].slice;

  bootstrap = window.BC.namespace("bootstrap");

  docs = window.BC.namespace("docs");

  models = window.BC.namespace("models");

  $.extend(this, bootstrap);

  oldSetInterval = window.setInterval;

  previousInterval = null;

  window.setInterval = function(fn, time) {
    return previousInterval = oldSetInterval.call(window, fn, time);
  };

  docs.example = function(title, description, content, attr) {
    if (attr == null) {
      attr = {};
    }
    if (previousInterval) {
      window.clearInterval(previousInterval);
    }
    return div(attr, h2(title), p(description), content(), pre({
      "class": 'prettyprint linenums',
      id: 'code ' + title
    }));
  };

  docs.body = function() {
    var items;
    items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return div(items).addClass('bs-docs-example');
  };

  docs.currentLocation = models.model(location.hash);

  isActive = function(link) {
    if (docs.currentLocation()) {
      return docs.currentLocation().indexOf(link.getAttr('href')) === 0;
    }
  };

  docs.toLi = function(link) {
    return li(link).bindClass(docs.currentLocation, function() {
      if (isActive(link)) {
        return 'active';
      }
    }).onUpdate(function(el) {
      if (el.hasClass('active')) {
        el.parent().parent().find('li').removeClass('active');
        return el.addClass('active');
      }
    });
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var body, bootstrap, docs, models, store,
    __slice = [].slice;

  docs = window.BC.namespace("docs");

  docs.examples = window.BC.namespace("docs.examples");

  bootstrap = window.BC.namespace("bootstrap");

  models = window.BC.namespace("models");

  store = window.BC.namespace("store");

  $.extend(this, bootstrap, models, docs, store);

  body = function() {
    var items;
    items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return div({
      "class": 'padded'
    }, items);
  };

  docs.examples.chat = function() {
    return section(h1("Chat"), docs.code.chat(), example("Chat app", "You can open the chat example in different tabs.", function() {
      var chatMessages, currentUser, lastTyped, message, messageText, messages, presense, userList, users;
      lastTyped = 0;
      message = function(user, content) {
        return object({
          user: user,
          content: content
        });
      };
      messages = collection([
        message({
          name: 'Chat example'
        }, "Welcome!")
      ]);
      pusher(messages, 'messages');
      currentUser = object({
        _id: Math.floor(Math.random() * 1000000),
        name: "User" + Math.floor(Math.random() * 1000),
        ping: 0,
        typedBefore: 1000
      });
      presense = function(currentUser, collection) {
        var lastSeen;
        window.setInterval((function() {
          currentUser.ping++;
          return currentUser.typedBefore = Date.now() - lastTyped;
        }), 10 * 1000);
        lastSeen = {};
        pusher(users, 'users', (function(item) {
          return item._id;
        }), 5);
        users.filter(function(user) {
          return user._id !== currentUser._id && (!lastSeen[user._id] || (Date.now() - lastSeen[user._id]) < 15 * 1000);
        });
        return users.subscribe(collection.actionHandler({
          update: function(user) {
            return lastSeen[user._id] = Date.now();
          }
        }));
      };
      users = collection([currentUser]);
      presense(currentUser, users);
      messageText = model();
      userList = function() {
        return div().span3(input.text(bind(currentUser.name)).span12(), ul.unstyled().foreach(users, function(user) {
          return li(span(bind(user.name)), right(span().muted('Typing...')).bindVisible(bind(user.typedBefore), function() {
            return user.typedBefore < 500;
          }));
        }));
      };
      chatMessages = function() {
        return div().span9(div({
          "class": 'messages'
        }).foreach(messages, function(message) {
          return p(strong(message.user.name + ": "), message.content);
        }).onUpdate(function(el) {
          return el.scrollTop(el[0].scrollHeight);
        }), form.inline(append(input.text({
          placeholder: 'Enter message...'
        }, messageText).span9().on('keydown', function() {
          currentUser.typedBefore = 0;
          return lastTyped = Date.now();
        }), button.primary('Send', function() {
          currentUser.typedBefore = 1000;
          return messages.add(message(currentUser, messageText("")));
        })).span12()));
      };
      return body(div.container.fluid(div.row.fluid(userList(), chatMessages())));
    }));
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var body, bootstrap, docs, models,
    __slice = [].slice;

  docs = window.BC.namespace("docs");

  docs.examples = window.BC.namespace("docs.examples");

  bootstrap = window.BC.namespace("bootstrap");

  models = window.BC.namespace("models");

  $.extend(this, bootstrap, models, docs);

  body = function() {
    var items;
    items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return div(items);
  };

  docs.examples.email = function() {
    return section(h1("Email"), docs.code.email(), example("Email client", "", function() {
      var byFolder, byId, currentUser, data, email, emailList, leftPanel, moveTo, nextId, rightContent, rightPanel, selectedEmail, selectedFolder, sendEmail;
      byFolder = function(folder) {
        return function(email) {
          return email.folders.contains(folder);
        };
      };
      byId = function(id) {
        return function(item) {
          return item.id === id;
        };
      };
      currentUser = "kiril.minkov@gmail.com";
      data = object(docs.examples.emailData());
      selectedFolder = model("inbox");
      data.mail.filter(byFolder('inbox'));
      selectedEmail = model();
      nextId = (function() {
        var value;
        value = 100000;
        return function() {
          return value++;
        };
      })();
      email = function(init) {
        return object($.extend({
          "id": "mail_" + nextId(),
          "contact_id": data.contacts.at(0).id,
          "folders": ['sent'],
          "time": new Date().getTime(),
          "subject": "",
          "message": ""
        }, init));
      };
      emailList = function() {
        return table().foreach(data.mail, function(email) {
          var contact;
          contact = data.contacts.find(byId(email.contact_id));
          return tr(td().span3(email.important ? type.label().important('important') : void 0), td().span4(strong(contact.firstName + " " + contact.lastName)), td().span5(strong(email.subject))).on('click', function() {
            return selectedEmail(email);
          }).bindClass(selectedEmail, function() {
            if (selectedEmail() === email) {
              return 'info';
            }
          });
        });
      };
      rightContent = model(emailList());
      sendEmail = function(email) {
        var toSelector;
        toSelector = select(bind(email.contact_id)).foreach(data.contacts, function(contact) {
          return option(contact.email, contact.id);
        });
        return form.horizontal({
          From: span(currentUser),
          To: toSelector,
          Subject: input.text(bind(email.subject)),
          Email: textarea(bind(email.message)),
          actions: [
            button("Send", function() {
              data.mail.add(email);
              return rightContent(emailList());
            }), button("Cancel", function() {
              return rightContent(emailList());
            })
          ]
        });
      };
      leftPanel = function() {
        return div().span2(button("New", function() {
          return rightContent(sendEmail(email()));
        }), br(), pills.stacked().foreach(data.folders, function(folder) {
          return pill(folder, function() {
            selectedEmail("");
            selectedFolder(folder);
            return data.mail.filter(byFolder(folder));
          }).bindClass(selectedFolder, function() {
            if (selectedFolder() === folder) {
              return 'active';
            }
          });
        }));
      };
      moveTo = function(folder) {
        return function() {
          return selectedEmail(null).folders([folder]);
        };
      };
      rightPanel = function() {
        var folder;
        return div().span10(p({
          "class": 'email-actions muted'
        }, 'Select an email.').bindVisible(negate(selectedEmail)), button.group(button(icon.trash, "Delete", function() {
          return selectedEmail(null).folders(['trash']);
        }).bindDisabled(selectedEmail, function() {
          if (selectedEmail()) {
            return selectedEmail().folders.contains('trash');
          }
        }), dropdown(button({
          id: 'move-btn'
        }, "Move"), (function() {
          var _i, _len, _ref, _results;
          _ref = data.folders();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            folder = _ref[_i];
            _results.push(a(folder, moveTo(folder)));
          }
          return _results;
        })()), button(icon.forward, "Forward", function() {
          return rightContent(sendEmail(email({
            subject: "FW: " + selectedEmail(null).subject
          })));
        }), button(icon.pencil, "Reply", function() {
          return rightContent(sendEmail(email({
            contact_id: selectedEmail().contact_id,
            subject: "RE: " + selectedEmail(null).subject
          })));
        })).bindVisible(selectedEmail), div(rightContent));
      };
      return body(div.container.fluid(div.row.fluid(leftPanel(), rightPanel())));
    }));
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var docs;

  docs = window.BC.namespace("docs");

  docs.examples = window.BC.namespace("docs.examples");

  docs.examples.emailData = function() {
    return {
      folders: ["inbox", "later", "sent", "trash"],
      contacts: [
        {
          "id": "contact_342",
          "firstName": "Michael",
          "lastName": "Smith",
          "email": "ms@proxyweb.com"
        }, {
          "id": "contact_377",
          "firstName": "Mary",
          "lastName": "Jones",
          "email": "mary@jones.net"
        }, {
          "id": "contact_398",
          "firstName": "Billy",
          "lastName": "Idiot",
          "email": "william_idiot@gmail.com"
        }
      ],
      mail: [
        {
          "id": "mail_2139",
          "contact_id": "contact_342",
          "folders": ["inbox"],
          "time": 1334891976104,
          "subject": "Consectetur adipiscing elit",
          "message": "Vestibulum vestibulum varius diam in iaculis. Praesent ultrices dui vitae nibh malesuada non iaculis ante vulputate. Suspendisse feugiat ultricies egestas. Aenean a odio libero. Quisque mollis leo et est euismod sit amet dignissim sapien venenatis. Morbi interdum adipiscing massa"
        }, {
          "id": "mail_2143",
          "contact_id": "contact_377",
          "folders": ["inbox", "later"],
          "important": "true",
          "time": 1334884976104,
          "subject": "Neque porro quisquam velit!!",
          "message": "Curabitur sollicitudin mi eget sapien posuere semper. Fusce at neque et lacus luctus vulputate vehicula ac enim"
        }, {
          "id": "mail_2154",
          "contact_id": "contact_398",
          "folders": ["inbox"],
          "important": "true",
          "unread": "true",
          "time": 1334874976199,
          "subject": "Proin egestas aliquam :)",
          "message": "Aenean nec erat id ipsum faucibus tristique. Nam blandit est lacinia turpis consectetur elementum. Nulla in risus ut sapien dignissim feugiat. Proin ultrices sodales imperdiet. Vestibulum vehicula blandit tincidunt. Vivamus posuere rhoncus orci, porta commodo mauris aliquam nec"
        }, {
          "id": "mail_2176",
          "contact_id": "contact_377",
          "folders": ["inbox"],
          "time": 1334884976104,
          "subject": "Sed ut perspiciatis unde omnis?",
          "message": "laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem."
        }, {
          "id": "mail_2191",
          "contact_id": "contact_398",
          "folders": ["inbox"],
          "unread": "true",
          "time": 1334874976199,
          "subject": "At vero eos et accusamus!",
          "message": "Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat"
        }, {
          "id": "mail_2203",
          "contact_id": "contact_377",
          "folders": ["later"],
          "important": "true",
          "time": 1334874576199,
          "subject": "Mi netus convallis",
          "message": "Egestas morbi at. Curabitur aliquet et commodo nonummy, aliquam quis arcu, sed pellentesque vitae molestie mattis magna, in eget, risus nulla vivamus vulputate"
        }, {
          "id": "mail_2212",
          "contact_id": "contact_398",
          "folders": ["sent"],
          "time": 1334874579867,
          "subject": "Fusce tristique pretium eros a gravida",
          "message": "Proin malesuada"
        }, {
          "id": "mail_2021",
          "contact_id": "contact_342",
          "folders": ["trash"],
          "time": 1134874579824,
          "subject": "Phasellus vitae interdum nulla.",
          "message": "Pellentesque quam eros, mollis quis vulputate eget, pellentesque nec ipsum. Cras dignissim fringilla ligula, ac ullamcorper dui convallis blandit. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Etiam id nunc ac orci hendrerit faucibus vel in ante. Mauris nec est turpis, ut fringilla mi. Suspendisse vel tortor at nulla facilisis venenatis in sit amet ligula."
        }, {
          "id": "mail_1976",
          "contact_id": "contact_377",
          "folders": ["trash"],
          "time": 1034874579813,
          "subject": "Fusce tristique pretium :(",
          "message": "aliquam quis arcu."
        }
      ]
    };
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var bootstrap, docs, models;

  docs = window.BC.namespace("docs");

  docs.examples = window.BC.namespace("docs.examples");

  bootstrap = window.BC.namespace("bootstrap");

  models = window.BC.namespace("models");

  $.extend(this, bootstrap, models, docs);

  docs.examples.index = function(content) {
    if (content == null) {
      content = docs.examples.players();
    }
    return div(div().span3(nav(a({
      href: '#/examples/players/'
    }, "Players"), a({
      href: '#/examples/email/'
    }, "Email"), a({
      href: '#/examples/chat/'
    }, "Chat"), a({
      href: '#/examples/game/'
    }, "Game"), a({
      href: '#/examples/projects/'
    }, "Projects"), docs.toLi).addClass('nav-list bs-docs-sidenav sidenav affix')), div().span9(content));
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var bootstrap, docs, models, store;

  docs = window.BC.namespace("docs");

  docs.examples = window.BC.namespace("docs.examples");

  bootstrap = window.BC.namespace("bootstrap");

  models = window.BC.namespace("models");

  store = window.BC.namespace("store");

  $.extend(this, bootstrap, models, docs, store);

  docs.examples.game = function() {
    return section(h1("Game"), docs.code.game(), example("Multiplayer tic tac toe", "Open if different tabs to play the game.", function() {
      var boardFull, canPlay, checkFinished, content, currentPlayer, emptyState, enterPlayerName, game, gameList, games, getId, icon, initialState, myturn, otherPlayer, player, showGame, state;
      state = {
        EMPTY: "empty",
        TIC: "tic",
        TAC: "tac"
      };
      getId = function(item) {
        return item.id;
      };
      emptyState = function() {
        return {
          value: state.EMPTY,
          mark: false
        };
      };
      initialState = function() {
        var i, j, _i, _results;
        _results = [];
        for (i = _i = 0; _i < 3; i = ++_i) {
          _results.push((function() {
            var _j, _results1;
            _results1 = [];
            for (j = _j = 0; _j < 3; j = ++_j) {
              _results1.push(emptyState());
            }
            return _results1;
          })());
        }
        return _results;
      };
      currentPlayer = null;
      player = function(name) {
        return object({
          id: guid(),
          name: name,
          lastSeen: Date.now()
        });
      };
      game = function(player) {
        var obj;
        obj = object({
          id: guid(),
          players: [player],
          turn: 0,
          state: initialState(),
          lastSeen: Date.now(),
          finished: false
        });
        window.setInterval((function() {
          return obj.lastSeen = Date.now();
        }), 10 * 1000);
        return obj;
      };
      games = collection();
      pusher(games, 'games', getId);
      content = model();
      boardFull = function(game) {
        var i, j, _i, _j;
        for (i = _i = 0; _i < 3; i = ++_i) {
          for (j = _j = 0; _j < 3; j = ++_j) {
            if (game.state.at(i).at(j).value === state.EMPTY) {
              return false;
            }
          }
        }
        return true;
      };
      checkFinished = function(game) {
        var check, i, _i;
        check = function(x, y, dx, dy) {
          var currentState, k, _i, _j, _results;
          currentState = game.state.at(y).at(x).value;
          for (k = _i = 0; _i < 3; k = ++_i) {
            if (game.state.at(y + dy * k).at(x + dx * k).value !== currentState) {
              currentState = void 0;
            }
          }
          if (currentState && currentState !== state.EMPTY && !game.finished) {
            game.finished = game.players.at(game.turn).name + " won!";
            _results = [];
            for (k = _j = 0; _j < 3; k = ++_j) {
              _results.push(game.state.at(y + dy * k).at(x + dx * k).mark = true);
            }
            return _results;
          }
        };
        if (boardFull(game)) {
          game.finished = "Game finished.";
        }
        for (i = _i = 0; _i < 3; i = ++_i) {
          check(i, 0, 0, 1);
          check(0, i, 1, 0);
        }
        check(0, 0, 1, 1);
        return check(2, 0, -1, 1);
      };
      icon = function(value) {
        if (value === state.TIC) {
          return '<i class="icon-circle-blank tic"/>';
        } else if (value === state.TAC) {
          return '<i class="icon-remove tac"/>';
        } else {
          return "";
        }
      };
      myturn = function(game) {
        return game.players.count() === 2 && game.players.at(game.turn).id === currentPlayer.id;
      };
      otherPlayer = function(game) {
        return game.players.at(game.turn);
      };
      canPlay = function(game) {
        return game.players.count() > 1 && (game.players.at(0).id === currentPlayer.id || game.players.at(1).id === currentPlayer.id);
      };
      showGame = function(game) {
        return div(h3(map(game, function() {
          if (game.players.count() <= 1) {
            return "Waiting for other player to join...";
          } else if (canPlay(game)) {
            return game.players.at(0).name + " vs " + game.players.at(1).name;
          } else {
            return "Game is full, you can just observe.";
          }
        })), h4(map(game, function() {
          if (game.players.count() >= 2) {
            if (game.finished) {
              return game.finished;
            } else {
              if (myturn(game)) {
                return "Your turn";
              } else {
                return otherPlayer(game).name + "s turn.";
              }
            }
          }
        })).bindVisible(game.players, function() {
          return canPlay(game);
        }), div({
          "class": 'board'
        }).foreach(game.state, function(row) {
          return div({
            "class": 'board-row'
          }).foreach(row, function(field) {
            return div({
              "class": 'icon4 field'
            }, map(bind(field.value), function() {
              return icon(field.value);
            })).on('click', function() {
              if (myturn(game) && field.value === state.EMPTY && !game.finished) {
                field.value = game.turn === 0 ? state.TIC : state.TAC;
                checkFinished(game);
                return game.turn = (game.turn + 1) % 2;
              }
            }).bindClass(bind(field.mark), function() {
              if (field.mark) {
                return "mark";
              }
            });
          });
        }), div({
          "class": 'padding'
        }, button.primary('Play again', function() {
          game.finished = false;
          return game.state = initialState();
        }).bindVisible(bind(game.finished)), button("Go back", function() {
          game.players.remove(matchField(getId, currentPlayer));
          return content(gameList());
        })));
      };
      gameList = function() {
        return div(h2("Create new game"), button('Create', function() {
          var newGame;
          newGame = game(currentPlayer);
          games.add(newGame);
          return content(showGame(newGame));
        }), h2("Or join an existing game"), p(span(map(games, function() {
          return games.count();
        })), " currently available"), table(thead(tr(th("Players").span3(), th("Action")))).foreach(games, function(game) {
          return tr(td(ul.inline().foreach(game.players, function(player) {
            return li(player.name);
          }), p().muted('No players').bindVisible(game.players, function() {
            return game.players.count() === 0;
          })).span3(), td(button.primary("Join", function() {
            game.players.add(currentPlayer);
            return content(showGame(game));
          }).bindVisible(game, function() {
            return game.players.count() < 2;
          }), button.info("Watch", function() {
            return content(showGame(game));
          }).bindVisible(game, function() {
            return game.players.count() === 2;
          })));
        }));
      };
      enterPlayerName = function() {
        var playerName;
        playerName = model("");
        return div(h3("Enter player name"), form.inline(input.text(playerName), button.primary("Enter", function() {
          currentPlayer = player(playerName());
          return content(gameList());
        })));
      };
      content(enterPlayerName());
      return body(div(content));
    }));
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var bootstrap, docs, models;

  docs = window.BC.namespace("docs");

  docs.home = window.BC.namespace("docs.home");

  bootstrap = window.BC.namespace("bootstrap");

  models = window.BC.namespace("models");

  $.extend(this, bootstrap, models, docs);

  docs.home.index = function() {
    return section(docs.code.home(), div({
      "class": 'hero-unit'
    }, h1("Enter kiro.js"), br(), a({
      href: 'bundle.zip'
    }, "Download developer bundle")), example("Declarative bindings", "Allows to bind the values of html properties to models.", function() {
      var text;
      text = model("World");
      return body(input.text(text), h3(map(text, function() {
        return "Hello " + text();
      })));
    }), example("Bootstrap controls", "Succint api around bootstrap controls allows building quick prototypes and web apps.", function() {
      var text, user;
      user = object({
        firstName: "Kiril",
        lastName: "Minkov"
      });
      text = model("");
      return body(h5("Buttons"), button.primary("Primary", function() {
        return text("Primary");
      }), dropdown(button.info("Info", function() {
        return text("Info, info");
      }), a("Hello", function() {
        return text("Hello");
      }), dropdown.divider(), a("Test", function() {
        return text("Test");
      })), button.group(button.warning("Warning", function() {
        return text("Warning");
      }), button.success("Success", function() {
        return text("Success");
      }), button.danger("Danger", function() {
        return text("Danger");
      })), span(map(text, function() {
        return "I am " + text();
      })), h5("Forms"), form({
        "First name": input.text(bind(user.firstName)),
        "Last name": input.text(bind(user.lastName))
      }), pre(code(map(user, function() {
        return JSON.stringify(user, null, 4);
      }))), h5("Table"), table().bordered().hover().foreach([1, 2], function(row) {
        return tr().foreach([1, 2, 3], function(col) {
          return td(row + ", " + col);
        });
      }), h5("And more..."));
    }), example("Html templating", "Allows building responsive html components", function() {
      var text, textEdit;
      textEdit = function(text) {
        var content, edit, view;
        edit = function() {
          return input.text({
            autofocus: true
          }, text).on('blur', function() {
            return content(view());
          }).on('keydown', function(e) {
            if (e.keyCode === 13) {
              return content(view());
            }
          });
        };
        view = function() {
          return span(text).on('click', function() {
            return content(edit());
          });
        };
        content = model(view());
        return div(content);
      };
      text = model("Click to edit");
      return body(textEdit(text));
    }), example("Todo", "", function() {
      var done, notDone, remaining, todo, todoText, todos;
      todo = function(text, done) {
        if (done == null) {
          done = false;
        }
        return object({
          text: text,
          done: done
        });
      };
      todos = collection([todo('first todo')]);
      notDone = function(todo) {
        return !todo.done;
      };
      done = function(todo) {
        return todo.done;
      };
      remaining = function() {
        return todos.count(notDone) + " of " + todos.total() + " remaining";
      };
      todoText = model("");
      return div(span(map(todos, remaining)), button.link("archive", function() {
        return todos.remove(done);
      }), div().foreach(todos, function(todo) {
        return form.inline(input.checkbox(bind(todo.done)), span(bind(todo.text)));
      }), form.inline(input.text(todoText), button.primary('Add', function() {
        return todos.add(todo(todoText("")));
      })));
    }));
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var bootstrap, docs, models,
    __slice = [].slice;

  docs = window.BC.namespace("docs");

  docs.examples = window.BC.namespace("docs.examples");

  bootstrap = window.BC.namespace("bootstrap");

  models = window.BC.namespace("models");

  $.extend(this, bootstrap, models, docs);

  docs.examples.meteortodo = function() {
    return section(h1("Meteor todo"), function() {
      docs.code.meteortodo();
      return example("Meteor todo app", "", function() {
        var allLists, filter, main, side, tag, todo, todoList, todo_item, todos;
        tag = function(name) {
          return object({
            name: name
          });
        };
        todo = function(name) {
          return object({
            name: name,
            done: false
          });
        };
        todoList = function() {
          var items, name;
          name = arguments[0], items = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
          return object({
            name: name,
            todos: items
          });
        };
        allLists = array([]);
        filter = function() {
          var selectedTag;
          selectedTag = model();
          return div({
            id: "top-tag-filter"
          }, div({
            id: "tag-filter",
            "class": "tag-list"
          }, div({
            "class": "label"
          }, "Show:").foreach(tags, function(tag) {
            return div({
              "class": "tag"
            }, tag.text, span({
              "class": "count"
            }, tag.count)).bindClass(selectedTag, 'selected', function() {
              return selectedTag() === tag;
            }).on('click', function() {
              return selectedTag(tag);
            });
          })));
        };
        main = function() {
          return div({
            id: "main-pane"
          }, todos(list));
        };
        side = function() {
          var newList, selectedList;
          selectedList = model();
          newList = model("");
          return div({
            id: "side-pane"
          }, h3("Todo Lists"), div({
            id: "lists"
          }).foreach(lists, function(list) {
            var editing;
            editing = model(false);
            return div({
              "class": "list"
            }, div({
              "class": "edit"
            }, input.text({
              "class": "list-name-input",
              id: "list-name-input"
            }, list.name)).bindVisible(editing), div({
              "class": "display"
            }, a({
              "class": "list-name {{name_class}}",
              href: "/{{_id}}"
            }, list.name).on('click', function() {})).bindVisible(editing, function() {
              return !editing();
            }));
          }), div({
            id: "createList"
          }, input.text({
            id: "new-list",
            placeholder: "New list"
          }, newList)));
        };
        todos = function(list) {
          var newTodoText;
          newTodoText = model();
          return div({
            id: "items-view"
          }, div({
            id: "new-todo-box"
          }, input.text({
            id: "new-todo",
            placeholder: "New item"
          }, newTodoText)), ul({
            id: "item-list"
          }).foreach(list.todos, function(todo) {
            return todo_item(todo);
          }));
        };
        todo_item = function(todo) {
          var addingTag, editing, tagText;
          editing = model(false);
          addingTag = model(false);
          tagText = model("");
          return li({
            "class": "todo"
          }, div({
            "class": "edit"
          }, input.text({
            id: "todo-input"
          }, todo.text)).bindVisible(editing), div(div({
            "class": "destroy"
          }), div({
            "class": "display"
          }, input.checkbox({
            "class": "check",
            name: "markdone"
          }, todo.done), div({
            "class": "todo-text"
          }, todo.text))).bindVisible(editing, function() {
            return !editing();
          }), div({
            "class": "item-tags"
          }).foreach(todo.tags, function(tag) {
            return div({
              "class": "tag removable_tag"
            }, div({
              "class": "name"
            }, tag.name), div({
              "class": "remove"
            }));
          }), div({
            "class": "tag edittag"
          }, input.text({
            id: "edittag-input"
          }, tagText).on('keydown', function() {})).bindVisible(addingTag), div({
            "class": "tag addtag"
          }, "+tag").bindVisible(addingTag, function() {
            return !addingTag();
          }).on('click', function() {
            return addingTag(true);
          })).bindClass(todo.done, 'done');
        };
        return body(filter(), main(), side());
      });
    });
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var REQUEST_RATE, bootstrap, docs, models, store;

  docs = window.BC.namespace("docs");

  docs.examples = window.BC.namespace("docs.examples");

  bootstrap = window.BC.namespace("bootstrap");

  models = window.BC.namespace("models");

  store = window.BC.namespace("store");

  $.extend(this, bootstrap, models, docs);

  REQUEST_RATE = 1;

  docs.examples.players = function() {
    return section(h1("Players"), docs.code.players(), example("Players app", "The players state is persisted in mongolab and is updated in all tabs through push notifications.", function() {
      var id, player, players, selected;
      id = 1;
      player = function(name, score) {
        return object({
          _id: id++,
          name: name,
          score: score
        });
      };
      players = collection([player("C++", 5), player("Java", 10), player("Javascript", 15), player("Go", 25), player("Python", 20)]);
      store.mongoLab(players, 'examples', 'players', REQUEST_RATE);
      store.pusher(players, 'players', function(item) {
        return item._id;
      });
      players.sort(function(player1, player2) {
        if (player1.score < player2.score) {
          return 1;
        } else {
          if (player1.score > player2.score) {
            return -1;
          } else {
            return 0;
          }
        }
      });
      selected = model();
      return body(div({
        id: 'outer'
      }, div({
        "class": 'leader board'
      }).foreach(players, function(player) {
        return div({
          "class": 'player'
        }, span({
          "class": 'name'
        }, bind(player.name)), span({
          "class": 'score'
        }, bind(player.score))).bindClass(selected, function() {
          if (selected() === player) {
            return 'selected';
          }
        }).on('click', function() {
          return selected(player);
        });
      })), div({
        "class": 'details'
      }, div({
        "class": 'name'
      }, map(selected, function() {
        if (selected()) {
          return selected().name;
        }
      })), button({
        "class": 'inc'
      }, "Give 5 points", function() {
        return selected().score += 5;
      }), '&nbsp;', button({
        "class": 'inc'
      }, "Take 5 points", function() {
        return selected().score -= 5;
      })).bindVisible(selected), div({
        "class": 'none'
      }, 'Click a player to select').bindVisible(negate(selected)));
    }));
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var bootstrap, docs, models, store;

  docs = window.BC.namespace("docs");

  docs.examples = window.BC.namespace("docs.examples");

  bootstrap = window.BC.namespace("bootstrap");

  models = window.BC.namespace("models");

  store = window.BC.namespace("store");

  $.extend(this, bootstrap, models, docs, store);

  docs.examples.projects = function() {
    return section(h1("Projects"), docs.code.projects(), example("Javascript projects", "Blatantly stolen from angularjs.", function() {
      var addProject, byId, content, projectForm, projectList, projects;
      byId = function(id) {
        return function(item) {
          return id && item._id.$oid === id.$oid;
        };
      };
      content = model("");
      projects = collection([]);
      mongoLab(projects, 'examples', 'projects');
      projectForm = function(project) {
        console.log(project);
        return form({
          Name: input.text({
            required: true
          }, bind(project.name)),
          Site: input.text({
            required: true,
            type: 'url'
          }, bind(project.site)),
          Description: textarea({
            required: true
          }, bind(project.description)),
          actions: [
            a({
              "class": 'btn btn-primary'
            }, "Save", function() {
              if (!projects.find(byId(project._id))) {
                projects.add(project);
              }
              return content(projectList());
            }), a({
              "class": 'btn'
            }, 'Cancel', function() {
              return content(projectList());
            }), a({
              "class": 'btn btn-danger'
            }, 'Delete', function() {
              projects.remove(byId(project._id));
              return content(projectList());
            })
          ]
        });
      };
      addProject = function() {
        return projectForm(object({
          name: "",
          site: "",
          description: ""
        }));
      };
      projectList = function() {
        var query;
        query = model("");
        return div(input.text({
          placeholder: "Search"
        }, query).on('keyup', function() {
          return projects.filter(function(item) {
            return JSON.stringify(item).toLowerCase().indexOf(query().toLowerCase()) !== -1;
          });
        }), table(thead(tr(th(td("Project"), td("Description"), td(a('+', function() {
          return content(addProject());
        })))))).foreach(projects, function(project) {
          return tr(td(a({
            href: project.site
          }, project.name)), td(project.description), td(a('Edit', function() {
            return content(projectForm(project));
          })));
        }));
      };
      content(projectList());
      return body(div(content));
    }));
  };

}).call(this);
// Generated by CoffeeScript 1.4.0
(function() {
  var app, bootstrap, content, docs, models, site;

  bootstrap = window.BC.namespace("bootstrap");

  docs = window.BC.namespace("docs");

  models = window.BC.namespace("models");

  $.extend(this, bootstrap, models);

  content = model(docs.home.index());

  site = div.container(navbar(div.container(navbar.brand("kiro.js"), nav(a({
    href: '#/'
  }, "Home"), a({
    href: '#/api/'
  }, "Api"), a({
    href: '#/bootstrap/'
  }, "Bootstrap"), a({
    href: '#/examples/'
  }, "Examples"), docs.toLi))).inverse().fixedTop(), div.row().bindHtml(content));

  app = Sammy('body', function() {
    this.get('#/', function() {
      content(docs.home.index());
      return docs.currentLocation(location.hash);
    });
    this.get('#/:first/', function() {
      var first;
      first = this.params['first'];
      content(docs[first]['index']());
      return docs.currentLocation(location.hash);
    });
    this.get('#/:first/:second/', function() {
      var first, second;
      first = this.params['first'];
      second = this.params['second'];
      content(docs[first].index(docs[first][second]()));
      return docs.currentLocation(location.hash);
    });
    this.get('#/examples/projects/edit/:id/', function() {
      return console.log('mente');
    });
    return this.get('#/examples/projects/new/', function() {
      return console.log('mente');
    });
  });

  app.raise_errors = true;

  $(function() {
    return app.run('#/');
  });

  $('body').append(element(site));

}).call(this);
